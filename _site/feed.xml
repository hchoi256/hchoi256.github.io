<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-15T07:23:02+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">정리하여 내 것으로, AI</title><subtitle>Leveraging the state-of-the-art technology in AI</subtitle><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><entry><title type="html">DL: LeNet 신경망 - MiniPlaces 이미지 분류</title><link href="http://localhost:4000/dl/dl-miniplace-classification/" rel="alternate" type="text/html" title="DL: LeNet 신경망 - MiniPlaces 이미지 분류" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/dl/dl-miniplace-classification</id><content type="html" xml:base="http://localhost:4000/dl/dl-miniplace-classification/"><![CDATA[<p>LeNet 신경망을 활용해서 MiniPlaces 데이터셋 이미지 분류 작업을 수행한다.</p>

<p>‘MiniPlaces’ 데이터셋은 캐글과 같은 온라인에서 손쉽게 구할 수 있다 <a href="https://www.kaggle.com/datasets/russchua/miniplaces">여기</a>.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/convolutional-neural-network">download here</a></p>

<blockquote>
  <p>CNN이나 LeNet 신경망에 대한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="라이브러리-불러오기">라이브러리 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># python imports
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="c1"># torch imports
</span><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>
<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>

<span class="c1"># helper functions for computer vision
</span><span class="kn">import</span> <span class="nn">torchvision</span>
<span class="kn">import</span> <span class="nn">torchvision.transforms</span> <span class="k">as</span> <span class="n">transforms</span>
</code></pre></div></div>

<h1 id="lenet-신경망-구축">LeNet 신경망 구축</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LeNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span> <span class="n">num_classes</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">LeNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="c1"># certain definitions
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">flatten</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Flatten</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">256</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span><span class="mi">128</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear3</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">num_classes</span><span class="p">)</span>

    <span class="c1"># 순전파
</span>    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">shape_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># certain operations
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv2</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">linear1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">linear2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">linear3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">return</span> <span class="n">out</span><span class="p">,</span> <span class="n">shape_dict</span>
</code></pre></div></div>

<p>상기 LeNet 신경망에서 초기값 및 순전파 과정을 정의한다.</p>

<p>PyTorch 특성상 이후 학습 단계에서 <strong>역전파</strong>를 정의할 예정이다.</p>

<blockquote>
  <p><strong><em>‘Stride, Pooling, Padding’</em></strong> 혹은 순/역전파에 관한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="학습-가능-피라미터-개수optional">학습 가능 피라미터 개수(<em>Optional</em>)</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_model_params</span><span class="p">():</span>
    <span class="s">'''
    return the number of trainable parameters of LeNet.
    '''</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">LeNet</span><span class="p">()</span>
    <span class="n">model_params</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">model_params</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">numel</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">parameters</span><span class="p">()</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">requires_grad</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">model_params</span> <span class="o">/</span> <span class="mf">1e6</span>   
</code></pre></div></div>

<p>해당 과정은 학습에 필수는 아니지만, 교육 측면에서 도움이 될 수 있으니 만들어보았다.</p>

<h1 id="모델-학습">모델 학습</h1>

<p>하기 코드 옆에 주석을 자세히 달아놨으니 참조하며 읽어보길 바란다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">epoch</span><span class="p">):</span>
    <span class="s">"""
    model (torch.nn.module): The model created to train
    train_loader (pytorch data loader): Training data loader
    optimizer (optimizer.*): A instance of some sort of optimizer, usually SGD
    criterion (nn.CrossEntropyLoss) : Loss function used to train the network
    epoch (int): Current epoch number
    """</span>
    <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
    <span class="n">train_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="nb">input</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">total</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)):</span>
        <span class="c1">###################################
</span>        <span class="c1"># fill in the standard training loop of forward pass,
</span>        <span class="c1"># backward pass, loss computation and optimizer step
</span>        <span class="c1">###################################
</span>
        <span class="c1"># 1) zero the parameter gradients
</span>        <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
        <span class="c1"># 2) forward + backward + optimize
</span>        <span class="n">output</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span> <span class="c1"># 역전파 진행
</span>        <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>

        <span class="c1"># Update the train_loss variable
</span>        <span class="c1"># .item() detaches the node from the computational graph
</span>        <span class="c1"># Uncomment the below line after you fill block 1 and 2
</span>        <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>

    <span class="n">train_loss</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'[Training set] Epoch: {:d}, Average loss: {:.4f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">train_loss</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">train_loss</span>
</code></pre></div></div>

<p>‘<strong>tqdm</strong>‘는 progress bar를 생성해주고, 함수나 반복문의 TTC (Time To Completion) 를 예측하는 파이썬 패키지이다.</p>

<p>모델 학습 과정을 실시간으로 확인하기 위해 불러온 패키지이다.</p>

<p>주요 특징들을 살펴보자:</p>
<ul>
  <li><em>optimizer.zero_grad()</em>: 이전 step에서 각 layer 별로 계산된 gradient 값을 모두 0으로 초기화 시키는 작업으로, 0으로 초기화 하지 않으면 이전 step의 결과에 현재 step의 gradient가 누적으로 합해져서 계산된다.</li>
  <li><em>criterion</em>: 손실함수 (이 프로젝트는 ‘<em>크로스 엔트로피</em>‘를 활용한다)</li>
  <li><em>optimizer</em>: 최적화 방법 (i.e., Adam)</li>
  <li><em>loss.backward()</em>: back-propagation을 통해 gradient를 계산한다.</li>
  <li><em>optimizer.step()</em>: 각 layer의 gradient 값을 이용하여 파라미터를 업데이트.</li>
  <li><em>train_loss += loss.item()</em>: 손실값 누적 계산</li>
</ul>

<blockquote>
  <p><strong><em>크로스 엔트로피(Cross Entropy)</em></strong>에 관한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<blockquote>
  <p>보다 자세한 PyTorch 문법은 외부 사이트 <a href="https://gaussian37.github.io/dl-pytorch-snippets/">여기</a>를 참조하길 바란다.</p>
</blockquote>

<h1 id="모델-테스트">모델 테스트</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">epoch</span><span class="p">):</span>
    <span class="n">model</span><span class="p">.</span><span class="nb">eval</span><span class="p">()</span>
    <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="n">no_grad</span><span class="p">():</span>
        <span class="k">for</span> <span class="nb">input</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">test_loader</span><span class="p">:</span>
            <span class="n">output</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
            <span class="n">pred</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">correct</span> <span class="o">+=</span> <span class="n">pred</span><span class="p">.</span><span class="n">eq</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">view_as</span><span class="p">(</span><span class="n">pred</span><span class="p">)).</span><span class="nb">sum</span><span class="p">().</span><span class="n">item</span><span class="p">()</span>

    <span class="n">test_acc</span> <span class="o">=</span> <span class="n">correct</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">.</span><span class="n">dataset</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'[Test set] Epoch: {:d}, Accuracy: {:.2f}%</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mf">100.</span> <span class="o">*</span> <span class="n">test_acc</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">test_acc</span>
</code></pre></div></div>

<p>이제 개인적으로 각자 MiniPlaces 데이터셋을 활용해서 직접 PyTorch로 모델을 학습시켜보도록 하자.</p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="DL" /><category term="deep learning" /><category term="classification" /><category term="MiniPlaces" /><category term="PyTorch" /><category term="python" /><summary type="html"><![CDATA[LeNet 신경망을 활용해서 MiniPlaces 데이터셋 이미지 분류 작업을 수행한다.]]></summary></entry><entry><title type="html">ML: Minimax 알고리즘 - Teeko Game</title><link href="http://localhost:4000/ml/ml-teeko-minimax/" rel="alternate" type="text/html" title="ML: Minimax 알고리즘 - Teeko Game" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/ml/ml-teeko-minimax</id><content type="html" xml:base="http://localhost:4000/ml/ml-teeko-minimax/"><![CDATA[<p><strong>Minimax</strong> 알고리즘을 활용해서 <strong>Teeko</strong> 게임을 구현한다.</p>

<blockquote>
  <p><strong><em>Teeko Game</em></strong>이란?</p>

  <p>It is a game between two players on a 5x5 board. Each player has four markers of either red or black. Beginning with black, they take turns placing markers (the “drop phase”) until all markers are on the board, with the goal of getting four in a row horizontally, vertically, or diagonally, or in a 2x2 box as shown above. If after the drop phase neither player has won, they continue taking turns moving one marker at a time – to an adjacent space only! (this includes diagonals, not just left, right, up, and down one space.) – until one player wins. Note, the game has no “wrap-around” similar to other board games, so a player can not move off of the board or win using pieces on the other side of the board.</p>
</blockquote>

<p>이 프로젝트는 <strong>군집화(Clustering)</strong>의 개념을 숙지하고 있다는 전제로 수행한다.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/hierarchical-clustering-pokemon">download here</a></p>

<h1 id="데이터셋-관찰">데이터셋 관찰</h1>

<p><img src="https://user-images.githubusercontent.com/39285147/184554603-837ebc40-75b2-4c96-b87e-385eec2b63bd.png" alt="image" /></p>

<ul>
  <li>Columns: <em>Attack, Sp. Atk, Speed, Defense, Sp. Def, and HP</em></li>
</ul>

<h1 id="라이브러리-불러오기">라이브러리 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.cluster.hierarchy</span> <span class="kn">import</span> <span class="n">dendrogram</span><span class="p">,</span> <span class="n">linkage</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy.linalg</span> <span class="k">as</span> <span class="n">LA</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
    <span class="n">pokemons</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="c1"># 사전 형태로 csv 데이터를 가져온다
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"#"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'#'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Name'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 1"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 1'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 2"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 2'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Total"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"HP"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'HP'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Attack'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Defense'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Atk'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Def'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Speed'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Generation"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Generation'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Legendary"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Legendary'</span><span class="p">]</span>
            <span class="n">pokemons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pokemons</span> <span class="c1"># 리스트 형태로 반환
</span></code></pre></div></div>

<h1 id="데이터-전처리">데이터 전처리</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_features</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"HP"</span><span class="p">])],</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'int64'</span><span class="p">)</span>
</code></pre></div></div>

<p>포켓몬 데이터셋에는 범주형 데이터가 존재한다.</p>

<p>따라서, 수치형과 범주형 데이터 type을 지정하고, 손쉬운 연산을 위해 최종 출력을 numpy 배열의 형태로 반환하자.</p>

<h1 id="거리-계산-함수">거리 계산 함수</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
        <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
            <span class="c1"># equal first index ith
</span>            <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                    <span class="c1"># equal second index jth
</span>                    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="c1"># share same pokemon stat
</span>                        <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>유클리드 거리를 사용해서 ‘<strong>Complete-linkage(완전 연결)</strong>’ 기법으로 군집간 거리를 계산한다.</p>

<p>Complete-linkage(완전 연결) 이외에도 Average linkage 등 여러 방법으로 군집간 거리를 계산할 수 있다.</p>

<blockquote>
  <p>보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="군집-합치기merge">군집 합치기(Merge)</h1>

<p>HAC는 군집들을 합쳐가면서 계층적 군집화를 진행한다.</p>

<p>하기 코드는 군집을 합치기 위한 함수이다.</p>

<p>보다 자세한 이해는 각 코드 옆 주석을 참고하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">):</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
    <span class="nb">min</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">]</span>  <span class="c1"># default to inf for replacement
</span>    <span class="c1"># iterate through cluster list (i.e., [1 2 3] --&gt; (1, 2), (1, 3), (2, 3))
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>    <span class="c1"># already clustered
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">continue</span>    <span class="c1"># already clusterd
</span>            <span class="n">tfst</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="n">tsnd</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]))</span>
            <span class="c1"># check if multiple pokemons in cluster or not
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in both
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">cluster_list2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c1</span> <span class="ow">in</span> <span class="n">cluster_list1</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c2</span> <span class="ow">in</span> <span class="n">cluster_list2</span><span class="p">:</span>
                        <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">)]</span>
                        <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                        <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                        <span class="c1"># get index of max distance
</span>                        <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span> <span class="c1"># complete-linkage
</span>                        <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in first cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in second cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">c</span><span class="p">)]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># single pokemon in both
</span>                <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>상기 코드는 존재하는 군집 리스트 중에서 가장 가까운 거리의 군집 두 개를 찾는다.</p>

<p>여기서 군집 간 거리는 ‘complete-linkage’ 방법에 근거한다.</p>

<p>이러한 맥락에서, 주목할 점은 ‘<strong>max_idx = np.argmax(dist)</strong>’ 여기이다.</p>

<p>우리는 완전 연결 방법에 기반해서 군집 간 거리를 구하고 서로 가장 가까이 위치한 군집들을 하나의 군집으로 통합한다.</p>

<p>완전 연결은 서로 다른 군집에 포함된 데이터들의 거리가 가장 먼 값을 군집의 거리로 채택한다.</p>

<p>이를 위해, ‘np.argmax’를 사용해서 군집 간 거리를 도출하고, ‘get_min_distance(min, max_dist)’를 통해서 가장 가까운 거리에 위치한 군집을 찾아 해당 군집과 하나로 합쳐진다.</p>

<p>이 외 코드는 천천히 읽어보면 충분히 이해 가능한 부분들이다.</p>

<h1 id="hac">HAC</h1>

<p>이제 HAC 계산에 필요한 모든 함수들을 만들었으니, HAC를 구축해보자!</p>

<p>이 단계에서는 가장 가까운 거리의 군집 두 개를 찾아서 하나의 군집으로 통합하는 과정이 진핸된다.</p>

<p>각 코드 옆에 주석을 달았으니 참조하며 읽어보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hac</span><span class="p">(</span><span class="n">features</span><span class="p">):</span>
    <span class="n">flen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
    <span class="c1"># (n-1) x 4 array
</span>    <span class="n">res</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">flen</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="c1"># track clusters
</span>    <span class="n">cluster_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span><span class="p">):</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="c1"># compute complete-linkage
</span>    <span class="n">count</span> <span class="o">=</span> <span class="n">flen</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="c1"># get minimum distance indices
</span>        <span class="n">indices</span> <span class="o">=</span> <span class="n">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
        <span class="c1"># clusters to be merged
</span>        <span class="n">c1</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">c2</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
        <span class="c1"># check if multiple pokemons in cluster or not
</span>        <span class="c1"># if tuple, then multiple pokemons, otherwise single pokemon
</span>        <span class="n">tfst</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c1</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">tsnd</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c2</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">l1</span> <span class="o">=</span> <span class="n">l2</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">tfst</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">tsnd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="c1"># single pokemon
</span>            <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># multiple pokemons
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">tsnd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="c1"># merge clusters
</span>        <span class="n">ncluster</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">fst_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">snd_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1"># update output
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">fst_idx</span>         <span class="c1"># index of first cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">snd_idx</span>         <span class="c1"># index of seoncd cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>      <span class="c1"># distance
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ncluster</span><span class="p">)</span>   <span class="c1"># num of elements in cluster
</span>        <span class="c1"># add into cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">count</span><span class="p">]</span> <span class="o">=</span> <span class="n">ncluster</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1"># remove from cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">fst_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">snd_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h1 id="결과-확인">결과 확인</h1>

<p>HAC를 시각화 하는 방법으로 ‘<strong><em>dendrogram</em></strong>‘이라는 함수를 자주 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>
    <span class="n">dn</span> <span class="o">=</span> <span class="n">dendrogram</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">21</span><span class="p">):</span>
    <span class="n">Z</span> <span class="o">=</span> <span class="n">hac</span><span class="p">([</span><span class="n">calc_features</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">load_data</span><span class="p">(</span><span class="s">'Pokemon.csv'</span><span class="p">)][:</span><span class="n">n</span><span class="p">])</span>
    <span class="n">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
</code></pre></div></div>

<p>군집 몇 개를 합칠 것인지 그 숫자를 인풋으로 부여한다.</p>

<p><em>[군집 2개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555068-caa7859d-9651-41c8-b3fe-41b6032fcce5.png" alt="image" /></p>

<p><em>[군집 3개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555089-1434d5be-0e8f-442f-b981-fdf65a12379f.png" alt="image" /></p>

<p><em>[군집 4개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555094-fe695724-17ee-47df-9ea8-070ea24c774b.png" alt="image" /></p>

<p>…</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555117-ebd0bf14-f711-473b-b0ec-275833e32ad3.png" alt="image" /></p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="ML" /><category term="machine learning" /><category term="teeko" /><category term="game" /><category term="minimax" /><category term="python" /><summary type="html"><![CDATA[Minimax 알고리즘을 활용해서 Teeko 게임을 구현한다.]]></summary></entry><entry><title type="html">ML: PCA - Image Compression(이미지 압축)</title><link href="http://localhost:4000/ml/ml-pca/" rel="alternate" type="text/html" title="ML: PCA - Image Compression(이미지 압축)" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/ml/ml-pca</id><content type="html" xml:base="http://localhost:4000/ml/ml-pca/"><![CDATA[<p>PCA를 이용해서 이미지 압축을 진행해보자.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/PCA">download here</a></p>

<p>이번 프로젝트는 <strong>PCA</strong>를 활용해서 <strong>이미지 압축</strong> 문제를 해결한다.</p>

<p>이론적으로 PCA의 개념을 이해하고 있다는 전제로 프로젝트를 수행한다.</p>

<blockquote>
  <p><a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">PCA</a> 개념 숙지는 여기!</p>
</blockquote>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.linalg</span> <span class="kn">import</span> <span class="n">eigh</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_and_center_dataset</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="n">dc</span> <span class="o">=</span> <span class="n">f</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># 정규화
</span>    <span class="k">return</span> <span class="n">dc</span>
</code></pre></div></div>

<h1 id="공분산-행렬-구하기">공분산 행렬 구하기</h1>

<p><img src="https://user-images.githubusercontent.com/39285147/184553498-b0da1938-a6d9-4ad1-b8f9-8c127c7cfbe7.png" alt="image" /></p>

<p><strong>공분산</strong>은 <strong>데이터 분포에 대한 특징</strong>을 포함하는 행렬이다.</p>

<blockquote>
  <p>보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_covariance</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">dataset</span><span class="p">),</span> <span class="n">dataset</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="고유값-분해eigendecomposition">고유값 분해(Eigendecomposition)</h1>

<p>고유값 분해는 정방행렬을 대상으로 적용할 수 있는 기법이다.</p>

<p>만약 우리가 다루는 행렬이 <strong>정방행렬</strong>이 아닌 <strong>직각행렬</strong>이라면 고유값 분해대신 <strong>특이값 분해(singular value decomposition)</strong>를 사용하면 된다.</p>

<blockquote>
  <p>이 또한 보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_eig</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">subset_by_index</span><span class="o">=</span><span class="p">[</span><span class="n">d</span><span class="o">-</span><span class="n">m</span><span class="p">,</span> <span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># get largest m eigen-values/vectors
</span>    <span class="n">eigh_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">eigh_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="c1"># save columns of eigenvectors
</span>    <span class="n">wsrt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">w</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># eigenvalues in decreasing order
</span>    <span class="n">vsrt</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">vsrt</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">eigh_dict</span><span class="p">[</span><span class="n">wsrt</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="c1"># rearrangement
</span>    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">wsrt</span><span class="p">),</span> <span class="n">vsrt</span>
</code></pre></div></div>

<p>파이썬에서는 ‘<em>scipy.linalg import eigh</em>‘를 활용해서 손쉽게 고유값 분해를 처리할 수 있다.</p>

<p>해당 라이브러리의 ‘eigh’ 함수를 통해 고유값과 고유벡터를 얻을 수 있다.</p>
<ul>
  <li>‘<em>subset_by_index</em>’: 불러오는 고유값과 고유벡터 수를 지정한다.</li>
</ul>

<p>공분산 행렬에 고유값 분해를 취하여 얻는 고유벡터들 중에서 <strong>그 크기가 가장 큰 벡터들은 데이터 분포에서 분산을 가장 크게 만드는 축에 대한 주성분 벡터</strong>이다.</p>

<p>차원축소 과정에서, 분산을 가장 크게 만드는 주성분들 위로 데이터를 투영시키면, 차원이 줄어듦에 따라 소실되면 정보를 최소화할 수 있다.</p>

<blockquote>
  <p>보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<p>따라서, 우리는 m(압축하고자 하는 이미지 차원 개수)개의 고유벡터를 가져와서 축소를 진행한다.</p>

<p>‘get_eig’의 출력값은 각 고유벡터의 <strong>크기가 큰 순서로</strong> 고유값을 정렬한 대각행렬과 이에 상응하는 고유벡터를 return한다.</p>

<p>추가적으로, 하기 ‘get_eig_prop’는 압축하고자 하는 이미지 해상도 크기를 입력으로 받는 것이 아닌 <strong>어느 정도 비율로 이미지를 압축할 것인지</strong>를 인풋으로 받는 함수이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_eig_prop</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">perc</span><span class="p">):</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
    <span class="n">wsum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">subset_by_value</span><span class="o">=</span><span class="p">[</span><span class="n">perc</span> <span class="o">*</span> <span class="n">wsum</span><span class="p">,</span> <span class="n">wsum</span><span class="p">])</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
    <span class="n">eigh_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">eigh_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span>
    <span class="n">wsrt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">w</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># eigenvalues in decreasing order
</span>    <span class="n">vsrt</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">vsrt</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">eigh_dict</span><span class="p">[</span><span class="n">wsrt</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="c1"># rearrangement
</span>    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">wsrt</span><span class="p">),</span> <span class="n">vsrt</span>
</code></pre></div></div>

<h1 id="차원축소-투영projection">차원축소: 투영(projection)</h1>

<p>위에서 투영시켜야할 축들을 구해냈으니, 실질적으로 데이터를 그 축들에 투영시키면서 차원을 축소해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">project_image</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">U</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># img.shape: (1024,)
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">U</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span> <span class="c1"># U.shape: (1024, 2)
</span>        <span class="n">alpha</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">U</span><span class="p">[:,</span><span class="n">i</span><span class="p">],</span> <span class="n">img</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">U</span><span class="p">[:,</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span> <span class="nb">sum</span>
</code></pre></div></div>

<p>‘np.zeros(img.shape[0])’는 원본 이미지의 크기만큼의 배열을 생성하고, 그 값들은 전부 0으로 초기화한다.</p>

<p>‘U.shape[1]’는 우리가 투영시킬 차원(= 주성분)들에 대한 벡터의 개수이다.</p>
<ul>
  <li>‘U.shape[0]’는 원본 이미지의 해상도인 1024(32x32)의 값을 갖는다.</li>
</ul>

<p>[<em>투영(Projection) 공식</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184554057-7c2d4211-c7af-4c22-8e5d-37f157b54a48.png" alt="image" />
<img src="https://user-images.githubusercontent.com/39285147/184554076-25f700e4-e27f-4286-94dd-7254505d4f4b.png" alt="image" /></p>

<ul>
  <li>u들은 고유벡터들 말한다.</li>
  <li>x들은 원본 이미지 데이터이다.</li>
  <li>m: 투영시킬 차원 개수(= 최종 해상도 크기)</li>
</ul>

<h1 id="시각화-원본-이미지와-비교">시각화: 원본 이미지와 비교</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">display_image</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="n">proj</span><span class="p">):</span>
    <span class="c1"># reshape the images to be 32 x 32
</span>    <span class="n">org</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">order</span> <span class="o">=</span> <span class="s">'F'</span><span class="p">)</span>
    <span class="n">prj</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">proj</span><span class="p">,</span> <span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">order</span> <span class="o">=</span> <span class="s">'F'</span><span class="p">)</span>
    <span class="c1"># create a figure with one row of two subplots
</span>    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="c1"># title the subplots
</span>    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Original'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Projection'</span><span class="p">)</span>
    <span class="c1"># adjust aspect ratio
</span>    <span class="n">ax0</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">imshow</span><span class="p">(</span><span class="n">org</span><span class="p">,</span><span class="n">aspect</span> <span class="o">=</span> <span class="s">'equal'</span><span class="p">)</span>
    <span class="n">ax1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">imshow</span><span class="p">(</span><span class="n">prj</span><span class="p">,</span><span class="n">aspect</span> <span class="o">=</span> <span class="s">'equal'</span><span class="p">)</span>
    <span class="c1"># create a colorbar for each image
</span>    <span class="n">fig</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">ax0</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">fig</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="결과">결과</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">load_and_center_dataset</span><span class="p">(</span><span class="s">'&lt;이미지 파일&gt;.npy'</span><span class="p">)</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">get_covariance</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">Lambda</span><span class="p">,</span> <span class="n">U</span> <span class="o">=</span> <span class="n">get_eig</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">projection</span> <span class="o">=</span> <span class="n">project_image</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">U</span><span class="p">)</span>
<span class="n">display_image</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">projection</span><span class="p">)</span>
</code></pre></div></div>

<p>상기 코드를 통해 손쉽게 원본 이미지와 압축된 이미지를 비교해보자.</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184554368-15a426d7-fd5c-4838-97d6-2b13b820149c.png" alt="image" /></p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="ML" /><category term="machine learning" /><category term="pca" /><category term="image compression" /><category term="python" /><summary type="html"><![CDATA[PCA를 이용해서 이미지 압축을 진행해보자.]]></summary></entry><entry><title type="html">ML: Hierarchical Agglomerate Clustering(HAC) - 포켓몬 군집화</title><link href="http://localhost:4000/ml/ml-hca/" rel="alternate" type="text/html" title="ML: Hierarchical Agglomerate Clustering(HAC) - 포켓몬 군집화" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/ml/ml-hca</id><content type="html" xml:base="http://localhost:4000/ml/ml-hca/"><![CDATA[<p>Hierarchical Agglomerate Clustering(HAC) 이용해서 서로 다른 특성을 공유하는 Pokemon들을 군집으로 묶어보자.</p>

<p>‘Pokemon.csv’는 온라인에서 손쉽게 구할 수 있다.</p>

<p>이 프로젝트는 <strong>군집화(Clustering)</strong>의 개념을 숙지하고 있다는 전제로 수행한다.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/hierarchical-clustering-pokemon">download here</a></p>

<h1 id="데이터셋-관찰">데이터셋 관찰</h1>

<p><img src="https://user-images.githubusercontent.com/39285147/184554603-837ebc40-75b2-4c96-b87e-385eec2b63bd.png" alt="image" /></p>

<ul>
  <li>Columns: <em>Attack, Sp. Atk, Speed, Defense, Sp. Def, and HP</em></li>
</ul>

<h1 id="라이브러리-불러오기">라이브러리 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.cluster.hierarchy</span> <span class="kn">import</span> <span class="n">dendrogram</span><span class="p">,</span> <span class="n">linkage</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy.linalg</span> <span class="k">as</span> <span class="n">LA</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
    <span class="n">pokemons</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="c1"># 사전 형태로 csv 데이터를 가져온다
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"#"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'#'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Name'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 1"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 1'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 2"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 2'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Total"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"HP"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'HP'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Attack'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Defense'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Atk'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Def'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Speed'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Generation"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Generation'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Legendary"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Legendary'</span><span class="p">]</span>
            <span class="n">pokemons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pokemons</span> <span class="c1"># 리스트 형태로 반환
</span></code></pre></div></div>

<h1 id="데이터-전처리">데이터 전처리</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_features</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"HP"</span><span class="p">])],</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'int64'</span><span class="p">)</span>
</code></pre></div></div>

<p>포켓몬 데이터셋에는 범주형 데이터가 존재한다.</p>

<p>따라서, 수치형과 범주형 데이터 type을 지정하고, 손쉬운 연산을 위해 최종 출력을 numpy 배열의 형태로 반환하자.</p>

<h1 id="거리-계산-함수">거리 계산 함수</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
        <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
            <span class="c1"># equal first index ith
</span>            <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                    <span class="c1"># equal second index jth
</span>                    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="c1"># share same pokemon stat
</span>                        <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>유클리드 거리를 사용해서 ‘<strong>Complete-linkage(완전 연결)</strong>’ 기법으로 군집간 거리를 계산한다.</p>

<p>Complete-linkage(완전 연결) 이외에도 Average linkage 등 여러 방법으로 군집간 거리를 계산할 수 있다.</p>

<blockquote>
  <p>보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="군집-합치기merge">군집 합치기(Merge)</h1>

<p>HAC는 군집들을 합쳐가면서 계층적 군집화를 진행한다.</p>

<p>하기 코드는 군집을 합치기 위한 함수이다.</p>

<p>보다 자세한 이해는 각 코드 옆 주석을 참고하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">):</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
    <span class="nb">min</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">]</span>  <span class="c1"># default to inf for replacement
</span>    <span class="c1"># iterate through cluster list (i.e., [1 2 3] --&gt; (1, 2), (1, 3), (2, 3))
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>    <span class="c1"># already clustered
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">continue</span>    <span class="c1"># already clusterd
</span>            <span class="n">tfst</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="n">tsnd</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]))</span>
            <span class="c1"># check if multiple pokemons in cluster or not
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in both
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">cluster_list2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c1</span> <span class="ow">in</span> <span class="n">cluster_list1</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c2</span> <span class="ow">in</span> <span class="n">cluster_list2</span><span class="p">:</span>
                        <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">)]</span>
                        <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                        <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                        <span class="c1"># get index of max distance
</span>                        <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span> <span class="c1"># complete-linkage
</span>                        <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in first cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in second cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">c</span><span class="p">)]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># single pokemon in both
</span>                <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>상기 코드는 존재하는 군집 리스트 중에서 가장 가까운 거리의 군집 두 개를 찾는다.</p>

<p>여기서 군집 간 거리는 ‘complete-linkage’ 방법에 근거한다.</p>

<p>이러한 맥락에서, 주목할 점은 ‘<strong>max_idx = np.argmax(dist)</strong>’ 여기이다.</p>

<p>우리는 완전 연결 방법에 기반해서 군집 간 거리를 구하고 서로 가장 가까이 위치한 군집들을 하나의 군집으로 통합한다.</p>

<p>완전 연결은 서로 다른 군집에 포함된 데이터들의 거리가 가장 먼 값을 군집의 거리로 채택한다.</p>

<p>이를 위해, ‘np.argmax’를 사용해서 군집 간 거리를 도출하고, ‘get_min_distance(min, max_dist)’를 통해서 가장 가까운 거리에 위치한 군집을 찾아 해당 군집과 하나로 합쳐진다.</p>

<p>이 외 코드는 천천히 읽어보면 충분히 이해 가능한 부분들이다.</p>

<h1 id="hac">HAC</h1>

<p>이제 HAC 계산에 필요한 모든 함수들을 만들었으니, HAC를 구축해보자!</p>

<p>이 단계에서는 가장 가까운 거리의 군집 두 개를 찾아서 하나의 군집으로 통합하는 과정이 진핸된다.</p>

<p>각 코드 옆에 주석을 달았으니 참조하며 읽어보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hac</span><span class="p">(</span><span class="n">features</span><span class="p">):</span>
    <span class="n">flen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
    <span class="c1"># (n-1) x 4 array
</span>    <span class="n">res</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">flen</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="c1"># track clusters
</span>    <span class="n">cluster_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span><span class="p">):</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="c1"># compute complete-linkage
</span>    <span class="n">count</span> <span class="o">=</span> <span class="n">flen</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="c1"># get minimum distance indices
</span>        <span class="n">indices</span> <span class="o">=</span> <span class="n">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
        <span class="c1"># clusters to be merged
</span>        <span class="n">c1</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">c2</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
        <span class="c1"># check if multiple pokemons in cluster or not
</span>        <span class="c1"># if tuple, then multiple pokemons, otherwise single pokemon
</span>        <span class="n">tfst</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c1</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">tsnd</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c2</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">l1</span> <span class="o">=</span> <span class="n">l2</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">tfst</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">tsnd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="c1"># single pokemon
</span>            <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># multiple pokemons
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">tsnd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="c1"># merge clusters
</span>        <span class="n">ncluster</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">fst_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">snd_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1"># update output
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">fst_idx</span>         <span class="c1"># index of first cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">snd_idx</span>         <span class="c1"># index of seoncd cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>      <span class="c1"># distance
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ncluster</span><span class="p">)</span>   <span class="c1"># num of elements in cluster
</span>        <span class="c1"># add into cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">count</span><span class="p">]</span> <span class="o">=</span> <span class="n">ncluster</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1"># remove from cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">fst_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">snd_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h1 id="결과-확인">결과 확인</h1>

<p>HAC를 시각화 하는 방법으로 ‘<strong><em>dendrogram</em></strong>‘이라는 함수를 자주 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>
    <span class="n">dn</span> <span class="o">=</span> <span class="n">dendrogram</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">21</span><span class="p">):</span>
    <span class="n">Z</span> <span class="o">=</span> <span class="n">hac</span><span class="p">([</span><span class="n">calc_features</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">load_data</span><span class="p">(</span><span class="s">'Pokemon.csv'</span><span class="p">)][:</span><span class="n">n</span><span class="p">])</span>
    <span class="n">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
</code></pre></div></div>

<p>군집 몇 개를 합칠 것인지 그 숫자를 인풋으로 부여한다.</p>

<p><em>[군집 2개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555068-caa7859d-9651-41c8-b3fe-41b6032fcce5.png" alt="image" /></p>

<p><em>[군집 3개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555089-1434d5be-0e8f-442f-b981-fdf65a12379f.png" alt="image" /></p>

<p><em>[군집 4개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555094-fe695724-17ee-47df-9ea8-070ea24c774b.png" alt="image" /></p>

<p>…</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555117-ebd0bf14-f711-473b-b0ec-275833e32ad3.png" alt="image" /></p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="ML" /><category term="machine learning" /><category term="hac" /><category term="clustering" /><category term="pokemon" /><category term="python" /><summary type="html"><![CDATA[Hierarchical Agglomerate Clustering(HAC) 이용해서 서로 다른 특성을 공유하는 Pokemon들을 군집으로 묶어보자.]]></summary></entry><entry><title type="html">Python: PART 2: Web Application without Server</title><link href="http://localhost:4000/python/python-web-server-exercise/" rel="alternate" type="text/html" title="Python: PART 2: Web Application without Server" /><published>2022-08-13T00:00:00+09:00</published><updated>2022-08-13T00:00:00+09:00</updated><id>http://localhost:4000/python/python-web-server-exercise</id><content type="html" xml:base="http://localhost:4000/python/python-web-server-exercise/"><![CDATA[<hr />
<h1 id="강아지-품종-분류-ai-웹페이지">강아지 품종 분류 AI 웹페이지</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">opencv</span><span class="o">-</span><span class="n">python</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Loading the libraries
</span><span class="kn">from</span> <span class="nn">distutils.command.install_egg_info</span> <span class="kn">import</span> <span class="n">to_filename</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="nn">cv2</span> <span class="c1"># *opencv
</span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
</code></pre></div></div>

<p>상기 라이브러리 중에 눈에 띄는 것이 있다; <strong>cv2</strong></p>

<p>cv2 라이브러리는 opencv 패키지를 설치해서 불러올 수 있다.</p>

<p>*OpenCV(Open Source Computer Vision)는 다양한 영상/동영상 처리에 사용할 수 있는 실시간 처리에 능한 오픈소스 라이브러리이다.</p>

<p>실시간 웹서버와 같은 환경에서 활용성이 좋다!</p>

<p>자, 이제 여러 장의 서로 다른 강아지 품종 이미지를 학습한 사전 학습 모델 ‘dog_breed.h5’를 전이학습을 위해 불러오자.</p>

<blockquote>
  <p>해당 사전모델 요청 시 제공.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="n">load_model</span><span class="p">(</span><span class="s">"dog_breed.h5"</span><span class="p">)</span>
</code></pre></div></div>

<p>불러온 사전학습 모델은 다음과 같이 세 가지 강아지 품종의 클래스로 최종 출력을 도출한다.</p>

<p>만약, 더 완성도 높은 분류 모델을 형성하고 싶다면 <strong>fine-tuning</strong> 작업을 통해 모델 개선 혹은 <strong>ImageNet</strong>을 사전모델로 채택하는 선택지를 취할 수 있을 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CLASS_NAMES</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Scottish Deerhound'</span><span class="p">,</span><span class="s">'Maltese Dog'</span><span class="p">,</span><span class="s">'Bernese Mountain Dog'</span><span class="p">]</span>
</code></pre></div></div>

<p>상기 세 가지 강아지 품종 중에서 그나마 가장 유사한 종으로 인풋 이미지를 분류한다.</p>

<p>자, 이제 이전 시간에 배웠던 웹 페이지를 디자인할 시간이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"업로드한 개의 품종를 알아보자!"</span><span class="p">)</span> <span class="c1"># title
</span><span class="n">st</span><span class="p">.</span><span class="n">markdown</span><span class="p">(</span><span class="s">"개 이미지를 업로드 해주세요!"</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">markdown</span><span class="p">(</span><span class="s">"---"</span><span class="p">)</span> <span class="c1"># division
</span>
<span class="c1"># file uploader
</span><span class="n">dog_image</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">file_uploader</span><span class="p">(</span>
    <span class="n">label</span> <span class="o">=</span> <span class="s">"이미지를 선택해주세요..."</span><span class="p">,</span> 
    <span class="nb">type</span> <span class="o">=</span> <span class="p">[</span><span class="s">"jpg"</span><span class="p">,</span> <span class="s">"png"</span><span class="p">]</span>
<span class="p">)</span>
<span class="n">submit</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">button</span><span class="p">(</span><span class="s">"예측해주세요!"</span><span class="p">)</span> <span class="c1"># button object
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># button event handler
</span><span class="k">if</span> <span class="n">submit</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">dog_image</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># opencv의 imdecode 인자로 사용하기 위해 byte로 변환한다
</span>        <span class="n">file_bytes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span>
            <span class="nb">bytearray</span><span class="p">(</span><span class="n">dog_image</span><span class="p">.</span><span class="n">read</span><span class="p">()),</span> 
            <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span>
    <span class="p">)</span>
    <span class="n">opencv_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imdecode</span><span class="p">(</span><span class="n">file_bytes</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># save the input image
</span>
    <span class="n">st</span><span class="p">.</span><span class="n">image</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">,</span> <span class="n">channels</span> <span class="o">=</span> <span class="s">"BGR"</span><span class="p">)</span> <span class="c1"># opencv는 RGB가 아닌 BGR로 포맷을 저장한다
</span>
    <span class="c1"># adjusting the size
</span>    <span class="n">opencv_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">,</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">))</span>
    <span class="n">opencv_image</span><span class="p">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">Y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">)</span> <span class="c1"># fine-tuned model 예측 수행
</span>
    <span class="c1"># st.write(np.argmax(Y_pred))
</span>    <span class="n">st</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="s">"판단한 개의 품종은 "</span> <span class="o">+</span> <span class="n">CLASS_NAMES</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">Y_pred</span><span class="p">)]))</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184471368-46e7b321-db37-41d1-acd6-717e9478f320.png" alt="image" /></p>

<hr />
<h1 id="dataframe-분석하기">Dataframe 분석하기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
</code></pre></div></div>

<p>어떠한 dataset을 df 객체에 저장했다고 가정하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_types</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">dtypes</span>
<span class="n">cat_cols</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">data_types</span><span class="p">[</span><span class="n">data_types</span> <span class="o">==</span> <span class="s">"object"</span><span class="p">].</span><span class="n">index</span><span class="p">)</span> <span class="c1"># 범주형 컬럼 저장
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># container
</span><span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">container</span><span class="p">():</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"컨테이너"</span><span class="p">)</span>
    <span class="n">value_counts</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Sex"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">value_counts</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
    <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">col1</span><span class="p">:</span>
        <span class="c1"># 남녀 성비 분포 (Pie)
</span>        <span class="n">st</span><span class="p">.</span><span class="n">subheader</span><span class="p">(</span><span class="s">"서브 컬럼 1"</span><span class="p">)</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">value_counts</span><span class="p">,</span> <span class="n">autopct</span><span class="o">=</span><span class="s">"%0.2f%%"</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Male"</span><span class="p">,</span> <span class="s">"Female"</span><span class="p">])</span> <span class="c1"># 원형으로 성비 표현
</span>        <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">col2</span><span class="p">:</span>
        <span class="c1"># 남녀 성비 분포 (Bar)
</span>        <span class="n">st</span><span class="p">.</span><span class="n">subheader</span><span class="p">(</span><span class="s">"서브 컬럼 2"</span><span class="p">)</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">value_counts</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">value_counts</span><span class="p">)</span> <span class="c1"># bar로 성비 표현
</span>        <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">expander</span><span class="p">(</span><span class="s">"Results of Sex Ratio"</span><span class="p">):</span>
        <span class="n">st</span><span class="p">.</span><span class="n">dataframe</span><span class="p">(</span><span class="n">value_counts</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184472017-70a9dc48-5908-4104-9d56-167c49260c7f.png" alt="image" /></p>

<p>당신은 웹페이지 내에서 다른 plot 유형을 선택해서 데이터 분포를 확인하고 싶을지도 모른다.</p>

<p>상기 목표 역시 아래처럼 손쉽게 구현 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 다른 plot 유형 선택
</span><span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">container</span><span class="p">():</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"asdfasdfasdf"</span><span class="p">)</span>

    <span class="n">chart</span> <span class="o">=</span> <span class="p">(</span><span class="s">"box"</span><span class="p">,</span> <span class="s">"violin"</span><span class="p">,</span> <span class="s">"kdeplot"</span><span class="p">,</span> <span class="s">"histogram"</span><span class="p">)</span>
    <span class="n">chart_selection</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">selectbox</span><span class="p">(</span><span class="s">"asefaefa"</span><span class="p">,</span> <span class="n">chart</span><span class="p">)</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"box"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Sex"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"Fare"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"violin"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Sex"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"Fare"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"kdeplot"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Fare"</span><span class="p">],</span> <span class="n">hue</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">"Sex"</span><span class="p">],</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span> <span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">histplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Fare"</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">"Sex"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>

    <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184472175-c98abfb5-55c4-4af4-a688-521659032de1.png" alt="image" /></p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="Python" /><category term="python" /><category term="webserver" /><category term="streamlit" /><category term="opencv" /><summary type="html"><![CDATA[강아지 품종 분류 AI 웹페이지]]></summary></entry><entry><title type="html">[논문 분석] A Multi-Task Benchmark for Korean Legal Language Understanding and Judgement Prediction (arXiv 2022)</title><link href="http://localhost:4000/ai/ai-paper-ko-legal-nlp/" rel="alternate" type="text/html" title="[논문 분석] A Multi-Task Benchmark for Korean Legal Language Understanding and Judgement Prediction (arXiv 2022)" /><published>2022-08-12T00:00:00+09:00</published><updated>2022-08-12T00:00:00+09:00</updated><id>http://localhost:4000/ai/ai-paper-ko-legal-nlp</id><content type="html" xml:base="http://localhost:4000/ai/ai-paper-ko-legal-nlp/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/39285147/184294516-0dad2074-9c87-44f1-af52-6ea4c0b5f174.png" alt="image" /></p>

<p><a href="https://arxiv.org/abs/2206.05224"><strong>논문</strong></a></p>

<h1 id="들어가면서">들어가면서</h1>
<p>법률 계약서는 일반인이 독해하기 어려운 단어들 뿐만 아니라, 한 문장이 한 페이지를 차지할 정도로 긴 문장들을 포함한다.</p>

<p>이전에 참가한 한 세미나에서는 이러한 법률 계약서에 존재하는 오류를 검사하는 AI 모델을 실제 변호사와 대결시킨 사례를 소개했다.</p>

<p>AI 모델은 <strong>26초 만에 94%의 정확도</strong>로 오류를 검증해내었고, 반면 사람 변호사는 <strong>96분 동안 86%의 정확도</strong>로 오류를 잡아냈다.</p>

<p>이러한 압도적인 AI의 성능은 매번 적응되지 않을 정도로 정말이지 어마무시하다.</p>

<p>하지만, 상기 법률 계약서의 문서 내용은 영어로 적혀있었다. 다시 말해, 자연어 처리 분야에서 기계독해가 까다로운 <strong>한국어로 적힌 법률 계약서</strong>는 아직까진 그만한 성능을 내는 AI 모델이 전무하다.</p>

<p>상기 목표를 달성하기 위해서는 다양한 조건이 수반되어야 할터인데, 가령 한국어 기반 모델 검증을 위한 <strong>법률 평가 데이터셋</strong>이 필요할 것이고, 까다로운 한국어 문법을 정확히 이해하는 성능좋은 언어모델이 필요하다.</p>

<p>여기까지는 내 잡담이었으니 가볍게 무시해도 상관없다.</p>

<p>하지만, 앞서 언급된 사례는 다양한 전문 분야에서 <strong>한국어 기반 NLP 연구</strong>의 필요성을 부각한다는 점은 인지하자.</p>

<h1 id="introduction">INTRODUCTION</h1>
<p>[<em>KAIST AI Grad School, located in Seoul</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184298843-e3edab46-0d27-4a74-a1f1-62762d1a794a.png" alt="image" /></p>

<p>정부에서 출시한 규칙 및 도메인 지식에 근거한 기존 법률 시스템은 유의미한 성과를 내기도 했으나, <strong>범용성이 부족</strong>하다는 한계점이 존재했다.</p>

<p>이러한 실패에는 해당 전문 분야에 대한 <strong>한국어 NLP 데이터셋 부재</strong>와 NLP 학습에 <strong>까다로운 한국어 특성</strong>이 내재되어 있을 것이다.</p>

<p>하지만, Deep Learning에 발전에 따라 자연어 처리 또한 많은 변화의 시기를 거쳐서 ‘판결 예측’과 같은 여러 법률 분야에 새로운 기술적 패러다임을 제시한다.</p>

<p>이러한 격동의 시기에 발맞춰 전세계에서는 AI 모델 학습에 필수적인 법률 데이터셋을 만들기 시작했고, 서교수 연구팀 또한 기존에 정부에서 내놓은 활용 가치가 떨어졌던 한국어 법률 데이터셋로부터 더 확장하여 새로운 한국어 기반 법률 데이터셋 연구 개발에 임하게 되었다.</p>

<p>서교수를 주축으로한 연구팀은 ‘최초로’ <strong>한국어 기반 대용량 법률 AI 데이터셋</strong>과 <strong>‘LBOX OPEN’</strong>이라는 법률 평가 데이터셋, 그리고 <strong>LCUBE라는 한국어 법률 언어 모델</strong>을 만들게 되었다 (<em>LBOX OPEN과 LCUBE는 해당 논문 페이지를 통해 다운받아 이용 가능하다</em>).</p>

<p>LBOX OPEN은 <em>1개의 법률 corpus</em>, <em>두 개의 분류 문제</em>, <em>두 개의 법률 판단 예측 문제</em>, 그리고 <em>한 개의 요약 문제</em>를 위한 평가 데이터셋이다.</p>

<blockquote>
  <p>범죄와 같이 어떠한 종류의 사례들을 기반으로 구성된 데이터셋인지, 언제/어떻게 데이터를 수집했는지 등 보다 자세한 내용은 해당 논문에서 확인하길 바란다.</p>
</blockquote>

<h1 id="lbox-open---large-scale-korean-legal-ai-benchmark"><em>LBOX OPEN</em> - Large-scale Korean legal AI benchmark.</h1>

<p>LBOX OPEN의 구성은 다음과 같다:</p>
<ul>
  <li>(1) <strong>a large-scale legal precedent corpus</strong> (PRECEDENT CORPUS)</li>
  <li>(2) <strong>two classification tasks</strong> (CASE NAME, STATUTE)</li>
  <li>(3) <strong>two legal judgement prediction tasks</strong> (LJP-CRIMINAL, LJPCIVIL)</li>
  <li>(4) <strong>one summarization task</strong> (SUMMARIZATION).</li>
</ul>

<blockquote>
  <p>각 구성 요소에 대한 활용 방벙과 같은 보다 자세한 설명은 해당 논문에 나와있다.</p>
</blockquote>

<h2 id="data-preprocessing">Data preprocessing</h2>
<p>서교수 연구팀은 기존에 정부에서 내놓은 Korean precedents라는 raw data에 포함된 non-trivial 정보들을 자동 parsing하고자 <strong>custom data engineering pipeline</strong>을 만들었다.</p>

<p>해당 Pipeline에서 여러 분류 작업을 거친다.</p>
<ul>
  <li><em>RestNet</em>을 기반 <em>Layout classifier</em>를 활용하여 각 페이지를 <em>‘text only’</em> 혹은 <em>‘text w/ tbl or pictures’</em>로 분류하였다.</li>
  <li><em>Mask-R-CNN</em>의 <em>Layout parser</em>를 사용하여 non-textual 요소들을 페이지로부터 분리한다.</li>
  <li>Save the information to the database:
    <ul>
      <li>If pdf, extract text w/ custom rule-based parser</li>
      <li>Otherwise if images, extract text segments and their coordinates w/ proprietary OCR engine and use language model to corret OCR errors.</li>
    </ul>
  </li>
</ul>

<p>상기 과정을 거친 후 <strong>confidence score</strong>를 계산해 기준치보다 낮을 경우, 해당 페이지들은 연구팀이 직접 수동으로 처리한다.</p>

<p>마지막으로, 하기 정보를 JSON 형식으로 저장하고 최종 output을 도출한다:</p>
<ul>
  <li>(1) meta information such as case name, sentencing dates, and names of attendees</li>
  <li>(2) ruling</li>
  <li>(3) gist of claim</li>
  <li>(4) appeal</li>
  <li>(5) reasoning body that consists of facts, claims, reasoning, and decision of judges.</li>
</ul>

<h1 id="lcube---language-model-based-on-lbox-open"><em>LCUBE</em> - Language model based on LBOX OPEN</h1>
<p><strong>Classification tasks</strong></p>
<ul>
  <li>GPT-2 활용 decoder-only 모델 –&gt; comparable performance with MT5 (a competitive encoder-decoder language model with larger size)</li>
</ul>

<p><strong>Summarization tasks</strong></p>
<ul>
  <li>타모델에 비해 상대적으로 안좋은 성능을 보인다.</li>
</ul>

<h1 id="experiments">EXPERIMENTS</h1>
<p>CASE NAME, STATUTE, LJP-CRIMINAL, LJP-CIVIL, 그리고 SUMMARIZATION tasks에 대하여 실험 평가를 진행한다.</p>

<h2 id="model-training">Model training</h2>
<p>서교수님의 LK 연구소는 한정된 예산으로 GPU와 같은 하드웨어를 따로 소유하는 것이 아니라 클라우드를 대여하는 연구 방식으로 유명하다.</p>

<p>이번 프로젝트에서 역시 클라우드에서 Nvidia RTX3090/RTX6000를 대여하여 모델 학습을 진행했다.</p>

<p>다음은 모델 학습에 사용된 parameter settings이다:</p>
<ul>
  <li><strong>learning rate</strong>: 0.00003-0.0001</li>
  <li><strong>batch</strong>: 8-16</li>
  <li><strong>optimizer</strong>: AdamW</li>
  <li><strong>fine-tuning</strong>: MT5-small (checkpoint: <em>‘google/mt5-small’</em>)</li>
  <li><strong>accracy</strong>: <em>F</em>1</li>
  <li>etc.</li>
</ul>

<blockquote>
  <p>보다 상세한 spec은 해당 논문을 참조하길 바란다.</p>
</blockquote>

<h2 id="metric">Metric</h2>
<ul>
  <li>(1) the case is counted as a true positive if their values are equal</li>
  <li>(2) false positive f their values are not equal</li>
  <li>(3) When the target field exists only in GT but not in the prediction, the case is counted as a false negative.</li>
  <li>(4) If the target field is empty in the GT but exists in the prediction it is counted as a false positive.</li>
  <li>(5) If the field is empty in both GT and the prediction, the case is considered as a truenegative.</li>
</ul>

<blockquote>
  <p>The zero labels in LJP-CRIMINAL are counted as nulls.</p>
</blockquote>

<h2 id="results">Results</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/184300687-c0aa8c4c-5d9c-4156-b674-737bac61bbd8.png" alt="image" /></p>

<p><strong>LCUBE-base</strong> vs. <strong>KoGPT-2</strong></p>
<ul>
  <li>In all tasks except SUMMARIZATION, LCUBE-base shows a higher performance</li>
</ul>

<h1 id="limitations">LIMITATIONS</h1>
<p>해당 논문 모든 내용은 한국 법체계의 first level court에 대한 precedents만을 고려한 연구 결과이다.</p>

<p>또한, 원고, 피고와 같은 요인들을 인풋으로 고려하지 않은 판결 예측 결과라고 가정하며, LBOX OPEN은 legal information retrieval task 등 여러 문제에 대한 사례 정보는 반영하지 않는다.</p>

<p>상기 언급된 한계점들은 시스템적으로 구현이 매우 까다로우며, 도메인 지식이 풍부한 여러 전문가와의 협업이 필요시 될것이며, 이것이 곧 LBOX OPEN의 미래 과제일 것이다.</p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="AI" /><category term="AI" /><category term="dissertation" /><category term="Research" /><category term="논문" /><category term="kaist" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">BERT Language Model - Part 3</title><link href="http://localhost:4000/nlp/bert-3/" rel="alternate" type="text/html" title="BERT Language Model - Part 3" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/nlp/bert-3</id><content type="html" xml:base="http://localhost:4000/nlp/bert-3/"><![CDATA[<h1 id="bert">BERT</h1>
<p>Bi-directional transformer로 이루어진 언어모델로, BERT 언어모델 위에 1개의 classification layer만 부착하여 다양한 NLP task를 수행한다.</p>

<h1 id="wordpiece-tokenizing">WordPiece tokenizing</h1>
<p>입력 문장을 toeknizing하고, 그 token들로 ‘token sequence’를 만들어 학습에 사용한다.</p>

<p>BPE와는 다르게 WordPiece는 <strong>우도</strong>로 병합을 진행하여, 두 문자가 같이 오는 문자 단위를 중요시한다.</p>

<blockquote>
  <p><em>우도</em>: 전체 글자 중 각 단어가 따로 등장한 것을 ‘분모’로, 같이 등장한 빈도수를 ‘분자’로 삼는다.</p>
</blockquote>

<h1 id="bpe-byte-pair-encoding">BPE (Byte Pair Encoding)</h1>
<p><img src="https://user-images.githubusercontent.com/39285147/183617390-94429c10-1868-4967-a534-f56199dfeba3.png" alt="image" /></p>

<p>이러한 작업을 위해 빈도수에 기반하여 토큰을 병합하는 <strong>BPE (Byte Pair Encoding)</strong> 알고리즘을 이용한다.</p>

<p>BPE는 언어 집합의 크기는 억제하면서 시퀀스의 길이를 압축하는 알고리즘이다 (<em>시퀀스 압축</em>: ‘l, o, w’ –&gt; ‘low’).</p>

<p>Word2Vec으로 어절 단위로 1차 tokenizing을 진핸한 후, iteration을 통해 나타난 token sequence 빈도수에 기반하여 <strong>의미 있는 패턴(subword)</strong>으로 잘라서 tokenizing한다.</p>

<p>가령, BERT 모델은 ‘고양경찰서’와 ‘종로경찰서’에서 ‘##경찰서’라는 token sequence를 형성한다.</p>

<h1 id="etri-korbert">ETRI KorBERT</h1>
<p>한국어는 영어와 다르게 <strong>조사의 쓰임에 따라 형태소가 변하는 문법적 특성</strong>나 <strong>교착어</strong> 등 NLP 처리에 까다로운 tasks를 수반하는 언어 중 하나이다.</p>

<p>영어 BERT 모델과 다르게, 형태소 단위로 corpus를 분절하고(= <em>Mecab tokenzier</em>) Word2Vec으로 1차 tokenizing 이전에 형태소 태그를 단어마다 붙여놓는 <strong>labeling 작업</strong>이 수반된다.</p>

<p>이 작업은 텍스트가 더 쪼개질 수 있도록 도와준다</p>
<ul>
  <li>가령, ‘이’라는 단어가 어떤 것을 가르키는 이것의 의미인지 숫자 2의 의미인지 구분해준다.</li>
</ul>

<p><strong>KorBERT Morphology</strong>와 <strong>KorBERT WordPiece</strong> 두 가지 세부 모델이 존재한다.</p>

<h2 id="korbert-성능에-영향을-미치는-요인">KorBERT 성능에 영향을 미치는 요인</h2>
<ul>
  <li>Corpus 사이즈</li>
  <li>Corpus 도메인</li>
  <li>Corpus tokenizing (어절, BPE, 형태소)</li>
  <li>Vocab 사이즈 小</li>
  <li><strong>데이터 전처리</strong></li>
</ul>

<h1 id="korbert-실습-과정">KorBERT 실습 과정</h1>
<ol>
  <li>
    <p>원하는 <strong>corpus</strong> 텍스트(가령, 위키 기사) 불러오기</p>
  </li>
  <li>
    <p><strong>SentenceTokenizer</strong>/WordTokenizer 1차 분절</p>
  </li>
  <li>‘Mecab’ tokenizer 기반 <strong>형태소 단위 분절</strong>
    <ul>
      <li>‘Mecab’이 가장 성능이 좋다.</li>
    </ul>
  </li>
  <li><strong>교착어 방지 token sequences 형성</strong> (‘<em>BertWordPieceTokenizer</em>’)
    <ul>
      <li>GPT 모델은 ‘<em>ByteLevelBPETokenizer</em>‘를 사용한다/</li>
    </ul>
  </li>
  <li>
    <p>데이터 전처리 (i.e., 불용어 등 제거)</p>
  </li>
  <li>
    <p>BERT 학습</p>
  </li>
  <li><em>*KorQuAD</em> 데이터셋으로 학습된 BERT 모델 평가
    <ul>
      <li><em>KorQuAD</em>: 자연어 이해(NLU, Natural Language Understanding) 학습용 한국어 질의응답 표준 데이터셋이다.</li>
    </ul>
  </li>
  <li>
    <p><a href="https://github.com/e9t/nsmc"><em>BERT 네이버 영화 리뷰 데이터 감성분석</em></a></p>
  </li>
  <li>
    <p><a href="https://github.com/machinereading/kor-re-gold"><em>BERT 관계 추출</em></a></p>
  </li>
  <li><strong>유튜브 댓글 데이터 감성 분석</strong> (데이터 수집: ‘<em>썸트랜드</em>’)</li>
</ol>

<h1 id="references">References</h1>
<p><a href="https://www.slideshare.net/qksksk657/korquad-v10"><em>KorQuAD</em></a></p>

<p><a href="https://arxiv.org/abs/1810.04805"><em>BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</em></a></p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="NLP" /><category term="NLP" /><category term="python" /><category term="BERT" /><category term="Language Model" /><summary type="html"><![CDATA[BERT Bi-directional transformer로 이루어진 언어모델로, BERT 언어모델 위에 1개의 classification layer만 부착하여 다양한 NLP task를 수행한다.]]></summary></entry><entry><title type="html">BERT Language Model - Part 2</title><link href="http://localhost:4000/nlp/bert-2/" rel="alternate" type="text/html" title="BERT Language Model - Part 2" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/nlp/bert-2</id><content type="html" xml:base="http://localhost:4000/nlp/bert-2/"><![CDATA[<h1 id="언어-모델-language-model-lm">언어 모델 (Language Model, LM)</h1>
<p>‘자연어’의 법칙을 컴퓨터로 모사하는 모델로, 다음에 등장할 단어 예측을 수행한다(= ‘맥락’을 고려한다).</p>

<h2 id="markov-확률-모델">Markov 확률 모델</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183536291-32897298-797e-4fd8-aac9-4bcc9ef3459e.png" alt="image" /></p>

<p>이전 단어의 형태를 통하여 확률적으로 다음에 나올 단어를 예측한다</p>

<p>가령, ‘like’ 다음에 ‘rabbit’이라는 단어가 나타날 확률은 주어진 학습 데이터에 기반하여 <strong>33%</strong>로 나타난다.</p>

<h2 id="rnn-recurrent-neural-network-모델">RNN (Recurrent Neural Network) 모델</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183536890-b8d596a2-c3c0-4c90-8193-ac96f8b8cdb0.png" alt="image" /></p>

<p>Markov 체인 모델을 <strong>딥러닝</strong>에 접목하여 확장한 모델이 바로 RNN이다.</p>

<p>현재 state를 결정하기 위하여 이전 state의 hidden layer 정보를 인풋으로 받는다.</p>

<p>이를 통해 <strong>앞선 문맥을 고려한</strong> 최종 출력 vector(Context vector)를 만든다.</p>

<p>보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>

<h3 id="seq2seq">Seq2Seq</h3>
<p><img src="https://user-images.githubusercontent.com/39285147/183537292-5cfe7c3f-d380-4e0c-aa20-266341ae5d9a.png" alt="image" /></p>

<p><strong>Encoder layer</strong>: Context vector 획득</p>

<p><strong>Decoder layer</strong>: Context vecotr 해독/해석</p>

<p><strong>번역</strong>에 자주 사용되어, 자연어를 인식(encoding)하고 알맞은 언어로 번역(decoding)하여 출력한다.</p>

<p>하지만 sequence가 길어진다면, <strong>초기 단어에 대한 정보를 점차 소실</strong>되는 구조적 한계점과 <strong>중요하지 않은 token의 정보</strong> 또한 최종 출력에 영향을 주는 단점이 존재한다.</p>

<h3 id="attention-모델">Attention 모델</h3>
<p><img src="https://user-images.githubusercontent.com/39285147/183538147-9eb2a2cf-b06c-4994-9a3b-11a4013a6fc8.png" alt="image" /></p>

<p>모든 token을 고려하는 Seq2Seq의 한계점을 보완한다.</p>

<p>이를 위해서 <strong>특정 중요 단어에 대한 집중도</strong>를 부여한다.</p>

<p><strong>RNN의 셀 각각이 도출하는 output을 모두 활용</strong>하여 denamic하게 context vector를 생성한다.</p>
<ul>
  <li>FCL(Fully connected layer)에서 RNN 셀들과 앞선 단어 문맥을 고려한 출력값에 대한 <strong>score를</strong> 계산한다</li>
  <li>softmax 활성화 함수를 사용해서 <strong>attention weight</strong>를 도출한다</li>
  <li>각 셀에 대한 결과값과 attention weight을 곱한 합계로 context vector를 구한다.</li>
  <li>Context vector를 decoder에 넣는다.</li>
  <li>최종 output의 분류 결과가 안 좋다면, FCL에서 score를 조정하여 <strong>decoder가 해석하기에 용이한 attention weight를 재계산한다</strong>.
    <ul>
      <li>Input과 output 사이의 연관성을 가늠해볼 수 있다.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>흔히, 딥러닝 모델이 내놓은 결과의 원인을 설명할 수 없는(<a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">Blackbox</a>) 경우가 많음에도 불구하고, Attention 모델은 attention weight 덕분에 해당 설명이 가능하다.</p>
</blockquote>

<p>하지만, RNN 신경망 구조를 기반으로 하기 때문에 이전 state의 결과를 기다려야 한다는 점에서 <strong>연산 속도가 느리다</strong>는 단점이 존재한다.</p>

<h2 id="self-attention-모델">Self-attention 모델</h2>
<p>RNN의 시계열 학습에서 벗어나 attention 구조만으로 학습에 임한다.</p>

<p>Decoder 해석에 용이한 방향으로 가중치 업데이트를 하는 것이 아닌 <strong>input 그 자체를 가장 잘 표현하기 위한 방향으로 학습하는 방식</strong>으로 동작한다.</p>

<p><img src="https://user-images.githubusercontent.com/39285147/183540623-c662b029-b65d-493c-8501-6edbcf8139c8.png" alt="image" /></p>

<ul>
  <li><strong>Query</strong>: 단어에 대한 가중치</li>
  <li><strong>Key</strong>: 단어가 Query와의 연관성을 나타내는 가중치</li>
  <li><strong>Value</strong>: 의미에 대한 가중치 (집중할 단어)</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/39285147/183540697-a5e884be-56b5-4c34-9b87-95f8f4eacf7f.png" alt="image" /></p>

<p>최종적으로, softmax와 value를 곱한 값의 합계를 도출하여 해당 단어가 가진 전체적인 의미를 설명한다.</p>

<p>이러한 과정을 단어마다 각각 수행한 것이 바로 self-attention 모델로, 하기 도표를 통해 직관적으로 이해해보자.</p>

<p><img src="https://user-images.githubusercontent.com/39285147/183540713-da495ca0-9f6e-4584-a701-b6c402576c87.png" alt="image" /></p>

<blockquote>
  <p>RNN보다 더 복잡한 상기 과정을 <strong>병렬처리</strong>로 수행하여 <strong>빠른 속도</strong>를 끌어낸 것이 바로 <strong>multi-head attention</strong>이다.</p>
</blockquote>

<h2 id="transformer-모델">Transformer 모델</h2>
<p>Multi-head attention으로 이루어진 encoder를 여러 층 쌓아서 encoding을 수행하며, 이것이 바로 BERT에 탑재된 기술이다.</p>

<p>seq2seq의 구조인 ‘인코더-디코더’를 따르면서도, 어텐션(Attention)만으로 구현한 모델이기 때문에 RNN을 사용하지 않는다.</p>

<p>또한, 인코더-디코더 구조를 설계하였음에도 번역 성능에서도 RNN보다 우수한 성능을 보여주었습니다.</p>

<blockquote>
  <p>self attention –&gt; multi-head attention –&gt; 하나의 encoder</p>
</blockquote>

<p>Transformer 개념을 숙지했으니, 이제 <a href="https://hchoi256.github.io/nlp/bert-3/"><strong>BERT 언어 모델</strong></a>에 대해 알아보자.</p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="NLP" /><category term="NLP" /><category term="python" /><category term="BERT" /><category term="Language Model" /><summary type="html"><![CDATA[언어 모델 (Language Model, LM) ‘자연어’의 법칙을 컴퓨터로 모사하는 모델로, 다음에 등장할 단어 예측을 수행한다(= ‘맥락’을 고려한다).]]></summary></entry><entry><title type="html">BERT Language Model - Part 1</title><link href="http://localhost:4000/nlp/bert-1/" rel="alternate" type="text/html" title="BERT Language Model - Part 1" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/nlp/bert-1</id><content type="html" xml:base="http://localhost:4000/nlp/bert-1/"><![CDATA[<h1 id="자연어-처리natural-language-processing-nlp">자연어 처리(Natural Language Processing, NLP)</h1>
<h2 id="자연어란">자연어란?</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183526289-0d7a43a8-f329-4ed1-9e0b-31259a32fe6f.png" alt="image" /></p>

<ul>
  <li>부호화(Encoding)</li>
  <li>해독(Decoding)</li>
</ul>

<p>자연어 처리는 상기 도표에서 컴퓨터가 <strong>텍스트를 해독하는 과정</strong>을 의미한다.</p>

<p>일상에서 사용하는 모든 인간의 언어로, 한국어, 영어와 같은 것들이 예시이다.</p>

<blockquote>
  <p>인공언어: 프로그래밍 언어, etc.</p>
</blockquote>

<h2 id="자연어-처리의-두-종류">자연어 처리의 두 종류</h2>
<ol>
  <li>
    <p><strong>규칙 기반 접근법 (Symbolic approach)</strong></p>
  </li>
  <li>
    <p><strong>확률 기반 접근법 (Statistical approach)</strong></p>
    <ul>
      <li><em>TF-IDF</em>
        <ul>
          <li>TF(Term frequency): 단어가 문서에 등장한 개수 (TF ↑, 중요단어확률 ↑)</li>
          <li>DF(Document frequency): 해당 단어가 등장한 문서의 개수 (DF ↑, 중요단어확률 ↓)</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h2 id="자연어-처리의-단계">자연어 처리의 단계</h2>
<p>① <strong>전처리</strong></p>

<ul>
  <li>개행문자, 특수문자, 공백, 중복 표현, 이메일 및 링크, 불용어, 조사 제거</li>
  <li>띄어쓰기, 문장분리 보정</li>
  <li>어간추출</li>
</ul>

<p>② <strong>Tokenizing</strong></p>

<p><img src="https://user-images.githubusercontent.com/39285147/183527388-2369aaca-6791-42d0-821b-1e09460d713f.png" alt="image" /></p>

<ul>
  <li>어절 tokenizing</li>
  <li>형태소 tokenizing</li>
  <li>n-gram tokenizing</li>
  <li><strong>WordPiece tokenizing</strong> (BERT)</li>
</ul>

<p>③ <strong>Lexical analysis</strong></p>

<ul>
  <li>어휘, 형태소 분석</li>
  <li>개체명 인식</li>
  <li>상호 참조</li>
</ul>

<p>④ <strong>Syntactic analysis</strong></p>

<ul>
  <li>구문 분석</li>
</ul>

<p>⑤ <strong>Semantic analysis</strong></p>

<ul>
  <li>의미 분석</li>
</ul>

<h2 id="nlp-활용-분야">NLP 활용 분야</h2>
<ul>
  <li>의미 분석 (i.e., 최초의 컴퓨터는 무엇 –&gt; ‘질문’)</li>
  <li>구문 분석 (i.e., 문법 구문 분석)</li>
  <li>감성 분석</li>
  <li>형태소 분석</li>
  <li>개체명 인식 (i.e., 네이버는 어떤 회사 –&gt; ‘기관’)</li>
</ul>

<h1 id="word-embedding">Word embedding</h1>
<p>‘자연어’에서 특징을 추출하는 방법이다.</p>

<p>텍스트를 컴퓨터가 이해하고, 효율적으로 처리하게 하기 위해서는 컴퓨터가 이해할 수 있도록 텍스트를 적절히 숫자로 변환하여 좌표평면 위에 표현할 필요가 있다.</p>

<p>그러한 방법으로 가장 첫 번째로 제시된 것이 <strong>One-hot encoding</strong>이다.</p>

<h2 id="1-one-hot-encoding-sparse-representation">1. <strong>One-hot encoding</strong> (sparse representation)</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183528088-8343c972-2c27-4f45-812b-3259e39e2151.png" alt="image" /></p>

<ul>
  <li>각 단어가 가지는 <strong>의미 파악이 불가능하다</strong></li>
  <li>단어 간 <strong>유사성 비교가 불가능하다</strong>.</li>
  <li><a href="https://github.com/hchoi256/ai-terms"><strong>차원의 저주</strong></a>에 빠질 위험성 多</li>
</ul>

<h2 id="2-word2vec-dense-representation">2. Word2Vec (dense representation)</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183535690-05358c7b-a9ba-4893-8959-53e36b521513.png" alt="image" /></p>

<ul>
  <li>자연어의 <strong>의미를 ‘벡터 공간’에 임베딩</strong>하여, one-hot encoding의 한계점을 해결한다.
    <ul>
      <li>i.e., <em>한국 - 서울 + 도쿄 = 일본</em></li>
    </ul>
  </li>
  <li>한 단어의 <strong>주변 단어들을 통해</strong> 비지도학습으로 그 단어의 의미 파악이 가능하다 (유사성 有).</li>
  <li><strong>한정된 자원</strong>으로 표현이 가능하다.</li>
</ul>

<p>One-hot 벡터들을 인풋으로 받고, 2개의 간단한 hidden layer를 가진 신경망으로 구성되있다.</p>

<p>주변부 단어를 예측하는 방식으로 학습하여 인풋 단어를 올바르게 유츄해낸다.</p>

<p>단어 벡터의 유사성과 semantic 혹은 syntactic analogy를 통하여 Word2Vec 성능을 검증한다.</p>

<p>하지만, 단어의 <strong>subword information(i,e., 서울 vs 서울시)을 무시</strong>하고 <strong>학습에 사용될 충분한 vocabulary가 주어져야 한다</strong>는 한계가 존재한다.</p>

<h2 id="3-fasttext">3. FastText</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/183534835-d42db067-905f-483d-a738-e437e4dc4e78.png" alt="image" /></p>

<p>subword information을 무시하는 Word2Vec 한계를 <strong>n-gram 기법</strong>을 통해 subword를 직접 학습하면서 극복한다 (i.e., assumption에 2-gram을 적용하면 as, ss, su,..).</p>

<p>FastText는 단어를 n-gram으로 분리한 후, 모든 n-gram vector를 합산한 평균을 통해 단어 벡터를 획득한다.</p>

<p><strong>오탈자, OOV (Out of Vocabulary), 그리고 빈도수가 적은 단어</strong>에 대한 학습이 용이하다.</p>

<h2 id="word-embedding-한계점">Word embedding 한계점</h2>
<p><strong>동형어, 다의어</strong>(<em>account: 계좌, 차지하다, etc.</em>)와 같은 단어에 대한 embedding 성능이 좋지 않다.</p>

<p><del>주변 단어를 예측하는 방식으로 학습하기 때문에 <strong>‘문맥’을 고려할 수 없다</strong>.</del></p>

<p>이러한 한계점을 타파하는 <a href="https://hchoi256.github.io/nlp/bert-2/"><strong>언어 모델(Language Model)</strong></a>에 대해 다음 시간에 알아보자.</p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="NLP" /><category term="NLP" /><category term="python" /><category term="BERT" /><category term="Language Model" /><summary type="html"><![CDATA[자연어 처리(Natural Language Processing, NLP) 자연어란?]]></summary></entry><entry><title type="html">[논문 분석] Deep Learning-Based Vehicle Anomaly Detection by Combining Vehicle Sensor Data (KAIS 2021)</title><link href="http://localhost:4000/ai/ai-paper-dl-behicle-detection-by-sensor/" rel="alternate" type="text/html" title="[논문 분석] Deep Learning-Based Vehicle Anomaly Detection by Combining Vehicle Sensor Data (KAIS 2021)" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/ai/ai-paper-dl-behicle-detection-by-sensor</id><content type="html" xml:base="http://localhost:4000/ai/ai-paper-dl-behicle-detection-by-sensor/"><![CDATA[<h1 id="deep-learning-based-vehicle-anomaly-detection-by-combining-vehicle-sensor-data">Deep Learning-Based Vehicle Anomaly Detection by Combining Vehicle Sensor Data</h1>
<p><img src="https://user-images.githubusercontent.com/39285147/182016969-496f6dca-a9c4-4501-9fc9-c8dd4f3c3ebd.png" alt="image" /></p>

<p><a href="https://koreascience.kr/article/JAKO202110650792056.pdf"><strong>논문</strong></a></p>

<h1 id="part-1-background">PART 1: Background</h1>
<p>기존 이상탐지 방법은 제한된 데이터를 다루는 <strong><em>전통적인 통계 방법</em>에 의존한다. 이 논문은 **AI 기반</strong> 보다 효과적인 이상탐지 방법을 제안한다.</p>

<p>자동차의 <strong>공회전 센서</strong> 및 <em>**이상 탐지</em> 간의 상관관계를 분석하여 인공지능 모델을 설계하였다.</p>

<p>기존의 SVM이나 PCA 모델 등은 다양한 데이터 분포를 가진 이상탐지가 어렵다는 한계점을 갖고 있다.</p>

<p>따라서, 다양한 특징을 가진 데이터에서의 분석이 가능한 최신 모델인 CNN과 LSTM과 같은 딥러닝 모델을 사용하였다.</p>

<p>이 둘 중에서, 활용할 데이터 분포에서 LSTM 보다 더 나은 예측성능을 자랑했던 <a href="https://github.com/hchoi256/ai-boot-camp/blob/main/ai/deep-learning/cnn.md"><strong>CNN</strong></a>으로 모델을 설계한다.</p>
<ul>
  <li>CNN을 활용하여 회전 기계의 고장 진단을 위한 모델(예측 정확도: <strong>99.41%</strong>)을 개발한다.</li>
</ul>

<blockquote>
  <p>LSTM은 RNN의 확장모델이다.</p>
</blockquote>

<blockquote>
  <p><strong>전통적인 통계 방법</strong>: 이상 탐지 소요 시간이 길고, 실시간으로 이루어지기 힘들다는 한계점과 여러 개의 데이터를 한 번에 처리 하기 어렵다.</p>
</blockquote>

<p>차량의 센서 데이터를 활용해서 딥러닝 기반 분류 모델을 구축하여 높은 성능의 이상 탐지 시스템을 만들고자 한다.</p>

<p>이를 토대로, 인간이 발견하기 어려운 정보 내에 패턴 탐지와 분포가 상이한 데이터에서 이상의 징후 탐지를 인공지능 기술의 활용으로 식별하여 이상탐지를 가능케한다.</p>

<h2 id="이상탐지">이상탐지</h2>
<p>이상한 것을 탐지하는 즉, 보편적이지 않은 것을 찾아내는 것이다.</p>

<p>해당 논문에서는 이미 정의된 이상탐지를 위한 규칙들이 존재하기 때문에 높은 정확도를 위해 본 연구에서는 <strong>지도이상탐지</strong>를 진행한다.</p>

<p>또한, 높은 정확도의 이상탐지 가능성을 확인하기 위해 다양한 센서를 조합하여 학습을 진행한다.</p>

<h3 id="지도-이상탐지supervised-anomaly-detection">지도 이상탐지(Supervised Anomaly Detection),</h3>
<ul>
  <li>주어진 학습 데이터 셋에 정상 샘플과 비정상 샘플의 데이터와 라벨이 모두 존재</li>
  <li>높은 정확도</li>
</ul>

<h3 id="반지도-이상탐지semi-supervised-anomaly-detection">반지도 이상탐지(Semi-supervised Anomaly Detection),</h3>
<ul>
  <li>정상인 데이터만을 가지고 학습하는 방법이며</li>
  <li>정확도가 낮다</li>
  <li>대표 모델: SVM</li>
  <li>Auto encoder, GAN</li>
</ul>

<h3 id="비지도-이상탐지unsupervised-anomaly-detection">비지도 이상탐지(Unsupervised Anomaly Detection)</h3>
<ul>
  <li>데이터의 정상/비정상의 라벨이 없는 상태로 학습을 진행하는 방법</li>
  <li>데이터의 라벨이 불필요하다는 장점이 존재하지만, 데이터 분포가 비선형 적이거나, 데이터의 성향이 벗어나는 경우 정확도가 낮으며,  하이퍼 파라미터(Hyper Parameter)에 매우 민감</li>
  <li>PCA, Audio encoder</li>
</ul>

<h1 id="part-2-observing-the-dataset-and-model">PART 2: Observing the dataset and model</h1>
<p>차량의 센서 데이터는 차량 주행 데이터로 다양한 운전자가 차량을 운전한 데이터이다 (해당 논문 참조 요망).</p>

<p>자동차 공회전 센서는 ‘LPG 연료 레일 압력’을 측정하는 센서이다.</p>
<ul>
  <li>해당 센서의 측정값이 214이상으로 5분 이상 지속되었을 때가 이상으로 정의한다.</li>
</ul>

<p>독립변수가 되는 5가지 카테고리</p>
<ul>
  <li>LPG 연료 레일 압력 이상</li>
  <li>연소분사 시간 및 실린더 이상</li>
  <li>산소센서전압S1(좌측) 이상</li>
  <li>산소센서전압(우측)이상</li>
  <li>배터리전압 이상</li>
</ul>

<p>활용한 데이터 개수는 총 12,816개이다.</p>

<h2 id="preprocessing">Preprocessing</h2>
<p>DB에 저장된 센서 데이터를 전처리하고 시계열 데이터를 이미지화(<a href="#시간-축의-크기에-따른-정확도-비교"><em>Sensor2IMG</em></a>)한다.</p>

<p>여기서 전처리란, 수집된 데이터를 본 연구에 적용하기 위해서 데이터에 이상에 대한 <strong>라벨을 작성하는</strong> 것을 의미한다.</p>

<h2 id="분석-모듈-3가지">분석 모듈 3가지</h2>
<p>Training set: test set = 7:3으로 나누어 Accuracy를 도출한다.</p>

<h3 id="시간-축의-크기에-따른-정확도-비교">시간 축의 크기에 따른 정확도 비교</h3>
<p>센서 데이터를 이미지화하여 삽입하기 위해 x축(시간 축)의 크기를 통일시켜야 모델에 데이터를 입력하기 용이하고, 높은 정확도를 얻을 수 있다.</p>

<p>하지만, x축인 시간 간격을 어떻게 설정하느냐에 따라 이미지에서 담을 수 있는 데이터의 양이 달라기며, 이는 곧 모델의 예측 정확도에 직접적 영향을 줄 것이다.</p>

<p>따라서, 실제 고장을 탐지하는 규칙의 시간 기준의 <strong>1배, 1.2배, 1.5배</strong>를 나누어 수행하여 최적의 시간 간격을 도출해본다.</p>

<p>[<em>Sensor2IMG Result</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/182019577-2daa7865-82cc-4277-b8f2-e0273c59286a.png" alt="image" /></p>

<p>x축은 시간, y축은 센서에서 감지한 값을 나타내며, 궁극적으로 시간간격을 1.5배한 모델의 정확도가 가장 높은 것을 볼 수 있다.</p>

<p>따라서, 본 논문은 실데이터로 주어진 전통적인 통계 규칙의 시간간격의 1.5배한 값을 모델에 적용한다.</p>

<h3 id="공회전-데이터만이-아닌-전체-주행-데이터-사용에-따른-정확도-비교">공회전 데이터만이 아닌 전체 주행 데이터 사용에 따른 정확도 비교</h3>
<p>전체 주행 데이터를 사용하는 것이 의미가 있을지 확인한다.</p>

<p>이를 위해, 설계한 CNN 모델에서 입력 피처를 공회전과 전체 데이터로 각각 달리 설정하고 학습시킨 결과를 비교한다.</p>

<p>[<em>Result of CNN case 2</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/182019395-44ffba9d-10f5-4389-85f4-559fd257f811.png" alt="image" /></p>

<p>상기 테이블은 <strong>공회전 데이터만</strong>을 활용하였을 때 더 높은 정확도를 보여주는 것을 보여준다.</p>

<p>이러한 결과는 일반 데이터를 사용하게 되면 이상을 탐지에 불순한 데이터가 함께 사용되기 때문이다.</p>

<p>이러한 불순한 데이터를 걸러낼 정도로 학습 데이터가 충분하지 않은 점이 낮은 정확도에 대한 근거일 것이다.</p>

<p>만약, 데이터 수를 더 높인다면, 불순 데이터를 무시하고 일반 주행 데이터를 활용하여 높은 정확도를 이룰 수 있을 것이다.</p>

<h3 id="이상을-탐지하는-하나의-센서만이-아닌-다른-센서를-함께-사용했을-때에-따른-정확도-비교">이상을 탐지하는 하나의 센서만이 아닌 다른 센서를 함께 사용했을 때에 따른 정확도 비교</h3>
<p>사용한 하나의 센서가 아닌 다른 센서와의 조합을 통해 정확도를 증가시킬 수 있을 것으로 예상하였다 (마치, 레이더 센서의 <em>Pod 통합 모듈</em>을 떠올린다).</p>

<p>본 논문에서는 다른 센서로 LPG 연료 레일 압력 센서와 관련 가능성이 높은 다른 9개의 센서를 선택한다</p>
<ul>
  <li>엔진 회전수</li>
  <li>흡기압센서</li>
  <li>냉각수온센서</li>
  <li>산소 센서 전압 1</li>
  <li>산소 센서 전압 2</li>
  <li>연소 분사시간</li>
  <li>에어컨 컴프레서</li>
  <li>타이머</li>
  <li>ETC모터 듀티)</li>
</ul>

<p>[<em>Result of CNN case 3</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/182019690-dd038e34-c699-4cff-99de-3e3f4204dcdc.png" alt="image" /></p>

<ul>
  <li>하나의 센서 만을 사용했을 때의 정확도: 80.59%</li>
  <li>다양한 센서의 조합으로 사용했을 때의 정확도: 모두 85%이상의 정확도</li>
</ul>

<p>이 중에서는 <em>산소센서전압</em>의 센서와 함께 사용하였을 때 97.06%로 가장 높은 정확도를 나타낸다.</p>

<h1 id="part-3-lstm-vs-cnn">PART 3: LSTM vs. CNN</h1>
<p>앞서 언급한 세 가지 분석 모듈에 대해 LSTM 모델 또한 같은 수행을 반복한다.</p>

<p>결과적으로 <strong>대부분의</strong> 모듈에서 CNN 기반 이상탐지 방법이 더 높은 정확도를 나타내었다.</p>

<p>이것은 CNN의 강점인 <strong>이미지 데이터 특징을 뽑아내는 데</strong> 높은 정확도를 보인다는 점에 기인한 결과이다 (<em>입력 데이터를 이미지로 변환</em>).</p>
<ul>
  <li>반면, LSTM 모델은 <strong>시계열 데이터를 활용하였을 때</strong> 높은 결과를 도출한다는 모델의 특징이 있다.</li>
</ul>

<p>한 가지 주목할만한 점은, 두 번째 모듈에서 LSTM을 활용하였을 때가 CNN보다 더 높은 정확도가 도출되었다.</p>

<p>이는 LSTM 모델의 특징이 반영된 결과로, 이전의 데이터를 기억하여 다음 학습에 반영하는 LSTM의 특징이 잘 녹아든 결과이다.</p>
<ul>
  <li>일반 데이터로 학습시키게 되어도 불순 데이터를 무시하기 위한 데이터가 충분히 존재해서 가능한 일이다.</li>
</ul>

<p>그 외 모듈들에 대해선, 같은 작업을 반복한 것이므로 더 이상의 언급은 삼가한다.</p>

<p>LSTM 성능 결과표가 궁금한 독자는 해당 논문을 참조하길 바란다.</p>

<h1 id="part-4-conclusion">PART 4: Conclusion</h1>
<p>해당 논문에서 활용한 CNN 모델은 <del>일반적으로 99% 이상의 정확도를 보일 수 있는 모델</del>이다.</p>

<p>하지만, <strong>현실 데이터 불충분 문제</strong>로 이보다 낮은 수준의 정확도를 보이고 있는 실정이다.</p>

<p>따라서, 아직 해당 모델을 완벽하게 적용하는 데는 한계가 있으므로 기존의 전통적인 방법과 접목하는 수준에서 활용할 필요가 있다.</p>

<p>만약, 이후에 다양한 데이터 변형 기법들(ImageGenerator, etc.)을 활용하여 데이터를 풍부하게 할 수 있다면, 현실에서도 사용가능한 신빙성 있는 높은 정확도의 모델을 구축할 수 있을 것으로 예상된다.</p>]]></content><author><name>Hojun Eric Choi</name><email>hchoi256@wisc.edu</email></author><category term="AI" /><category term="AI" /><category term="dissertation" /><category term="Research" /><category term="논문" /><category term="self-driving" /><summary type="html"><![CDATA[Deep Learning-Based Vehicle Anomaly Detection by Combining Vehicle Sensor Data]]></summary></entry></feed>