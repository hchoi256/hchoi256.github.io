<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-19T00:39:44+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">정리하여 내 것으로, AI 📂</title><subtitle>Leveraging SOTA Technologies in AI</subtitle><author><name>쭌스🎄</name></author><entry><title type="html">NLP - Part 7: Name Entity Recognition (NER) 앱</title><link href="http://localhost:4000/nlp/nlp-NER/" rel="alternate" type="text/html" title="NLP - Part 7: Name Entity Recognition (NER) 앱" /><published>2022-08-16T00:00:00+09:00</published><updated>2022-08-16T00:00:00+09:00</updated><id>http://localhost:4000/nlp/nlp-NER</id><content type="html" xml:base="http://localhost:4000/nlp/nlp-NER/"><![CDATA[<h1 id="사전-설정">사전 설정</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">spacy</span> <span class="n">spacy_streamlit</span>
<span class="o">%</span> <span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">spacy</span> <span class="n">download</span> <span class="n">en_core_web_trf</span>
</code></pre></div></div>

<p>1) 하나하나 직접 입력!
   -&gt; 노동력이 필요
   -&gt; 시간도 필요
   -&gt; 실수가 있을 수 있다.
   -&gt; 입력 도중에 값이 변할 수도 있다.</p>

<p>2) Copy &amp; Paste 로 할 때 총 1640번의 반복작업을 해야한다.
    붙여넣기 하고 정리가 필요하다!</p>

<p>3) 최후의 수단 웹 크롤링(Web Crawling)을 하자!
   -&gt; 반복을 내가 하기 싫다!
   -&gt; 매일 정해진 시간에 하고 싶다
   -&gt; 수집한 후에 데이터베이스든 엑셀파일이든 저장하고 싶다</p>

<p>웹 크롤링 (Web Crawling) :
  =&gt; 내가 수집하고자 하는 데이터가 있는 서버에 접속해서 해당 웹페이지의 소스코드를 가져오는 행위
  =&gt; 반복적인 일도 있고, 페이지 이동, 로그인 등등이 필요하다.
  =&gt; 컴퓨터는 시킨 일에 대해서 빠르게 반복적으로 잘 한다.
  =&gt; 해당 서버 모니터링 중 자주 빠르게 반복적으로 접근하는 IP를 차단</p>

<p>웹 스크래핑 (Web Scraping) :
  =&gt; 원하는 데이터가 있는 웹페이지에서 원하는 데이터를 추출하는 행위</p>

<p>각 웹사이트마다 
https://www.[웹사이트 주소]/robots.txt</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">beautifulsoup4</span>
</code></pre></div></div>]]></content><author><name>쭌스🎄</name></author><category term="NLP" /><category term="NLP" /><category term="NER" /><summary type="html"><![CDATA[사전 설정]]></summary></entry><entry><title type="html">Minimax 알고리즘 - Teeko Game</title><link href="http://localhost:4000/others/ml-teeko-minimax/" rel="alternate" type="text/html" title="Minimax 알고리즘 - Teeko Game" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/others/ml-teeko-minimax</id><content type="html" xml:base="http://localhost:4000/others/ml-teeko-minimax/"><![CDATA[<p><strong>Minimax</strong> 알고리즘을 활용해서 <strong>Teeko</strong> 게임을 구현한다.</p>

<p>Teeko 게임은 한국인들에게는 익숙하지 않은 보드 게임일 수도 있다 (하기 설명 참조).</p>

<blockquote>
  <p><strong><em>Teeko Game</em></strong>이란?</p>

  <p>It is a game between two players on a 5x5 board. Each player has four markers of either red or black. Beginning with black, they take turns placing markers (the “drop phase”) until all markers are on the board, with the goal of getting <strong>four in a row horizontally, vertically, or diagonally, or in a 2x2 box as shown above</strong>. If after the drop phase neither player has won, they continue taking turns moving one marker at a time – to an adjacent space only! (this includes diagonals, not just left, right, up, and down one space.) – until one player wins. Note, the game has no “wrap-around” similar to other board games, so a player can not move off of the board or win using pieces on the other side of the board.</p>
</blockquote>

<p>상기 설명에 나온 것처럼 4개의 마커가 수직, 수평, 대각, 혹은 2x2 박스 형태로 존재하게 되면 승리한다.</p>

<p>이 게임에서 당신은 AI 로봇과 Teeko 보드 게임을 펼치게 될 것이다.</p>

<p>이 프로젝트는 Minimax 알고리즘을 이해하고 있다는 전제로 진행한다.</p>

<blockquote>
  <p><a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">Minimax 알고리즘</a>이란?</p>
</blockquote>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/teeko-minimax-game">download here</a></p>

<h1 id="teekoplayer-클래스">TeekoPlayer 클래스</h1>

<p>Teeko 게임을 진행함에 있어서 각 플레이어 Object에 대해 제어하기 위해 클래스를 만들어보자.</p>

<p>자세한 설명은 코드 주석으로써 적어놨으니 참고하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TeekoPlayer</span><span class="p">:</span>
    <span class="s">""" An object representation for an AI game player for the game Teeko.
    """</span>
    <span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="s">' '</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
    <span class="n">pieces</span> <span class="o">=</span> <span class="p">[</span><span class="s">'b'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">""" Initializes a TeekoPlayer object by randomly selecting red or black as its
        piece color.
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">pieces</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">opp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">pieces</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">pieces</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">else</span> <span class="bp">self</span><span class="p">.</span><span class="n">pieces</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>    

    <span class="k">def</span> <span class="nf">GetPiecePos</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="s">'b'</span><span class="p">:</span>
                    <span class="n">b</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">))</span>
                <span class="k">elif</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
                    <span class="n">r</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">b</span><span class="p">,</span><span class="n">r</span>

    <span class="c1"># check largest # pieces nearby
</span>    <span class="k">def</span> <span class="nf">heuristic_gv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">piece</span><span class="p">):</span>
        <span class="n">b</span><span class="p">,</span><span class="n">r</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">GetPiecePos</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">piece</span> <span class="o">==</span> <span class="s">'b'</span><span class="p">:</span>
            <span class="n">mine</span> <span class="o">=</span> <span class="s">'b'</span>
            <span class="n">oppo</span> <span class="o">=</span> <span class="s">'r'</span>
        <span class="k">elif</span> <span class="n">piece</span> <span class="o">==</span> <span class="s">'r'</span><span class="p">:</span>
            <span class="n">mine</span> <span class="o">=</span> <span class="s">'r'</span>
            <span class="n">oppo</span> <span class="o">=</span> <span class="s">'b'</span>

        <span class="c1"># horizontal
</span>        <span class="n">mymax</span> <span class="o">=</span> <span class="n">oppmax</span> <span class="o">=</span> <span class="n">mycnt</span> <span class="o">=</span> <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>        
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span><span class="p">:</span>
                    <span class="n">mycnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">mycnt</span> <span class="o">&gt;</span> <span class="n">mymax</span><span class="p">:</span>
                <span class="n">mymax</span> <span class="o">=</span> <span class="n">mycnt</span>
            <span class="n">mycnt</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span><span class="p">:</span>
                    <span class="n">oppcnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">oppcnt</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
                <span class="n">oppmax</span> <span class="o">=</span> <span class="n">oppcnt</span>
            <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># vertical
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span><span class="p">:</span>
                    <span class="n">mycnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">mycnt</span> <span class="o">&gt;</span> <span class="n">mymax</span><span class="p">:</span>
                <span class="n">mymax</span> <span class="o">=</span> <span class="n">mycnt</span>
            <span class="n">mycnt</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span><span class="p">:</span>
                    <span class="n">oppcnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">oppcnt</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
                <span class="n">oppmax</span> <span class="o">=</span> <span class="n">oppcnt</span>
            <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># for / diagonal
</span>        <span class="n">mycnt</span> <span class="o">=</span> <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span><span class="p">:</span>
                    <span class="n">mycnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">mycnt</span> <span class="o">&gt;</span> <span class="n">mymax</span><span class="p">:</span>
                    <span class="n">mymax</span> <span class="o">=</span> <span class="n">mycnt</span>
                <span class="n">mycnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">row</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span><span class="p">:</span>
                    <span class="n">oppcnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">oppcnt</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
                    <span class="n">oppmax</span> <span class="o">=</span> <span class="n">oppcnt</span>
                <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># diagonal
</span>        <span class="n">mycnt</span> <span class="o">=</span> <span class="n">oppcnt</span> <span class="o">=</span> <span class="n">row</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span><span class="p">:</span>
                    <span class="n">mycnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">mycnt</span> <span class="o">&gt;</span> <span class="n">mymax</span><span class="p">:</span>
                    <span class="n">mymax</span> <span class="o">=</span> <span class="n">mycnt</span>
                <span class="n">mycnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">row</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span><span class="p">:</span>
                    <span class="n">oppcnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">oppcnt</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
                    <span class="n">oppmax</span> <span class="o">=</span> <span class="n">oppcnt</span>
                <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># 2X2
</span>        <span class="n">mycnt</span> <span class="o">=</span> <span class="n">oppcnt</span> <span class="o">=</span> <span class="n">row</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">mine</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="o">==</span> <span class="n">mine</span><span class="p">:</span>
                    <span class="n">mycnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">mycnt</span> <span class="o">&gt;</span> <span class="n">mymax</span><span class="p">:</span>
                    <span class="n">mymax</span> <span class="o">=</span> <span class="n">mycnt</span>
                <span class="n">mycnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">row</span> <span class="o">=</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">oppo</span> <span class="ow">or</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span><span class="o">==</span> <span class="n">oppo</span><span class="p">:</span>
                    <span class="n">oppcnt</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">oppcnt</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
                    <span class="n">oppmax</span> <span class="o">=</span> <span class="n">oppcnt</span>
                <span class="n">oppcnt</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">if</span> <span class="n">mymax</span> <span class="o">==</span> <span class="n">oppmax</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="n">state</span>
        <span class="k">elif</span> <span class="n">mymax</span> <span class="o">&gt;</span> <span class="n">oppmax</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mymax</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span> <span class="n">state</span> <span class="c1"># if mine is longer than opponent, return positive float
</span>
        <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">oppmax</span><span class="o">/</span><span class="mi">6</span><span class="p">,</span> <span class="n">state</span> <span class="c1"># if opponent is longer than mine, return negative float
</span>
    <span class="k">def</span> <span class="nf">Max_Value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
        <span class="n">bstate</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">state</span><span class="p">),</span><span class="n">state</span>
        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">heuristic_gv</span><span class="p">(</span><span class="n">state</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span><span class="p">)</span>
                
        <span class="n">a</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'-Inf'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">succ</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span><span class="p">):</span>
            <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Min_Value</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">:</span>
                <span class="n">a</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">bstate</span> <span class="o">=</span> <span class="n">s</span>        
        
        <span class="k">return</span> <span class="n">a</span><span class="p">,</span> <span class="n">bstate</span>

    <span class="k">def</span> <span class="nf">Min_Value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span><span class="n">depth</span><span class="p">):</span>
        <span class="n">bstate</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">state</span><span class="p">),</span><span class="n">state</span>        
        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">heuristic_gv</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">opp</span><span class="p">)</span>
    
        <span class="n">b</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'Inf'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">succ</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">opp</span><span class="p">):</span>
            <span class="n">val</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Max_Value</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">:</span>
                <span class="n">b</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">bstate</span> <span class="o">=</span> <span class="n">s</span>

        <span class="k">return</span> <span class="n">b</span><span class="p">,</span> <span class="n">bstate</span>
    
    <span class="k">def</span> <span class="nf">make_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="s">""" Selects a (row, col) space for the next move. You may assume that whenever
        this function is called, it is this player's turn to move.

        Args:
            state (list of lists): should be the current state of the game as saved in
                this TeekoPlayer object. Note that this is NOT assumed to be a copy of
                the game state and should NOT be modified within this method (use
                place_piece() instead). Any modifications (e.g. to generate successors)
                should be done on a deep copy of the state.

                In the "drop phase", the state will contain less than 8 elements which
                are not ' ' (a single space character).

        Return:
            move (list): a list of move tuples such that its format is
                    [(row, col), (source_row, source_col)]
                where the (row, col) tuple is the location to place a piece and the
                optional (source_row, source_col) tuple contains the location of the
                piece the AI plans to relocate (for moves after the drop phase). In
                the drop phase, this list should contain ONLY THE FIRST tuple.

        Note that without drop phase behavior, the AI will just keep placing new markers
            and will eventually take over the board. This is not a valid strategy and
            will earn you no points.
        """</span>
        <span class="n">drop_phase</span> <span class="o">=</span> <span class="bp">True</span>   <span class="c1"># TODO: detect drop phase        
</span>        <span class="k">if</span> <span class="nb">sum</span><span class="p">((</span><span class="n">i</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">'b'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">state</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="ow">and</span> <span class="nb">sum</span><span class="p">((</span><span class="n">i</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">'r'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">state</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">drop_phase</span> <span class="o">=</span> <span class="bp">False</span>                    
        <span class="k">if</span> <span class="ow">not</span> <span class="n">drop_phase</span><span class="p">:</span>
            <span class="c1"># TODO: choose a piece to move and remove it from the board
</span>            <span class="c1"># (You may move this condition anywhere, just be sure to handle it)
</span>            <span class="c1">#
</span>            <span class="c1"># Until this part is implemented and the move list is updated
</span>            <span class="c1"># accordingly, the AI will not follow the rules after the drop phase!
</span>            <span class="n">move</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">value</span><span class="p">,</span> <span class="n">bstate</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Max_Value</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>            
            <span class="n">arr1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bstate</span><span class="p">)</span>
            <span class="n">arr2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr1</span> <span class="o">==</span> <span class="bp">False</span><span class="p">)</span> <span class="c1"># check difference between succ and curr state
</span>            <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span> <span class="c1"># find original to define move
</span>                <span class="p">(</span><span class="n">origrow</span><span class="p">,</span> <span class="n">origcol</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span><span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>
                <span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="p">(</span><span class="n">origrow</span><span class="p">,</span> <span class="n">origcol</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>
                <span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>
            <span class="n">move</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
            <span class="n">move</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">origrow</span><span class="p">,</span> <span class="n">origcol</span><span class="p">))</span>  <span class="c1"># move for after drop phase
</span>            <span class="k">return</span> <span class="n">move</span>

        <span class="c1"># select an unoccupied space randomly
</span>        <span class="c1"># TODO: implement a minimax algorithm to play better       
</span>        <span class="n">move</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">value</span><span class="p">,</span> <span class="n">bstate</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">Max_Value</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">arr1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">bstate</span><span class="p">)</span>
        <span class="n">arr2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">where</span><span class="p">(</span><span class="n">arr1</span> <span class="o">==</span> <span class="bp">False</span><span class="p">)</span> <span class="c1"># diff between succ and curr state        
</span>        <span class="p">(</span><span class="n">row</span><span class="p">,</span><span class="n">col</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span> <span class="c1"># find original to define move
</span>            <span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">(),</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">item</span><span class="p">())</span>

        <span class="c1"># ensure the destination (row,col) tuple is at the beginning of the move list
</span>        <span class="n">move</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>              
        <span class="k">return</span> <span class="n">move</span>

    <span class="k">def</span> <span class="nf">succ</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="n">piece</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>        
        <span class="n">succ</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">drop_phase</span> <span class="o">=</span> <span class="bp">True</span>  <span class="c1"># TODO: detect drop phase
</span>
        <span class="k">if</span> <span class="nb">sum</span><span class="p">((</span><span class="n">i</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">'b'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">state</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="ow">and</span> <span class="nb">sum</span><span class="p">((</span><span class="n">i</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">'r'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">state</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">drop_phase</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">drop_phase</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                    <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="n">piece</span><span class="p">:</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">up</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">down</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">left</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">right</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">upleft</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">upright</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">downleft</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
                        <span class="n">succ</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">downright</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">))</span>
            <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">succ</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)):</span>
                <span class="n">new</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">new</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
                    <span class="n">new</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">piece</span>
                    <span class="n">succ</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">succ</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">up</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">down</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">left</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">right</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">upleft</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">upright</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">downleft</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>

    <span class="k">def</span> <span class="nf">downright</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">state</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">' '</span><span class="p">:</span>
            <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">state</span>
        
    <span class="k">def</span> <span class="nf">opponent_move</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">move</span><span class="p">):</span>
        <span class="s">""" Validates the opponent's next move against the internal board representation.
        You don't need to touch this code.

        Args:
            move (list): a list of move tuples such that its format is
                    [(row, col), (source_row, source_col)]
                where the (row, col) tuple is the location to place a piece and the
                optional (source_row, source_col) tuple contains the location of the
                piece the AI plans to relocate (for moves after the drop phase). In
                the drop phase, this list should contain ONLY THE FIRST tuple.
        """</span>
        <span class="c1"># validate input
</span>        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">move</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">source_row</span> <span class="o">=</span> <span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">source_col</span> <span class="o">=</span> <span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">source_row</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">[</span><span class="n">source_row</span><span class="p">][</span><span class="n">source_col</span><span class="p">]</span> <span class="o">!=</span> <span class="bp">self</span><span class="p">.</span><span class="n">opp</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="n">move</span><span class="p">)</span>
                <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"You don't have a piece there!"</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">source_row</span> <span class="o">-</span> <span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="nb">abs</span><span class="p">(</span><span class="n">source_col</span> <span class="o">-</span> <span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
                <span class="k">print</span><span class="p">(</span><span class="n">move</span><span class="p">)</span>
                <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">'Illegal move: Can only move to an adjacent space'</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">[</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">!=</span> <span class="s">' '</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">Exception</span><span class="p">(</span><span class="s">"Illegal move detected"</span><span class="p">)</span>
        <span class="c1"># make move
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">place_piece</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">opp</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">place_piece</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="n">piece</span><span class="p">):</span>
        <span class="s">""" Modifies the board representation using the specified move and piece

        Args:
            move (list): a list of move tuples such that its format is
                    [(row, col), (source_row, source_col)]
                where the (row, col) tuple is the location to place a piece and the
                optional (source_row, source_col) tuple contains the location of the
                piece the AI plans to relocate (for moves after the drop phase). In
                the drop phase, this list should contain ONLY THE FIRST tuple.

                This argument is assumed to have been validated before this method
                is called.
            piece (str): the piece ('b' or 'r') to place on the board
        """</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">move</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">[</span><span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">' '</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">[</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]][</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">piece</span>

    <span class="k">def</span> <span class="nf">print_board</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">""" Formatted printing for the board """</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">)):</span>
            <span class="n">line</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">row</span><span class="p">)</span><span class="o">+</span><span class="s">": "</span>
            <span class="k">for</span> <span class="n">cell</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">]:</span>
                <span class="n">line</span> <span class="o">+=</span> <span class="n">cell</span> <span class="o">+</span> <span class="s">" "</span>
            <span class="k">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"   A B C D E"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">game_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
        <span class="s">""" Checks the current board status for a win condition

        Args:
        state (list of lists): either the current state of the game as saved in
            this TeekoPlayer object, or a generated successor state.

        Returns:
            int: 1 if this TeekoPlayer wins, -1 if the opponent wins, 0 if no winner

        TODO: complete checks for diagonal and box wins
        """</span>
        <span class="c1"># check horizontal wins        
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">state</span><span class="p">:</span>            
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>                
                <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s">' '</span> <span class="ow">and</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>

        <span class="c1"># check vertical wins
</span>        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">!=</span> <span class="s">' '</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">][</span><span class="n">col</span><span class="p">]:</span>
                    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">col</span><span class="p">]</span><span class="o">==</span><span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>

        <span class="c1"># TODO: check \ diagonal wins
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s">' '</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]:</span>                    
                    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>

        <span class="c1"># TODO: check / diagonal wins
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s">' '</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">2</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">-</span> <span class="mi">3</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]:</span>                    
                    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>

        <span class="c1"># TODO: check 2x2 box wins
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="s">' '</span> <span class="ow">and</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>                    
                    <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">state</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">my_piece</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span>    
        <span class="k">return</span> <span class="mi">0</span> <span class="c1"># no winner yet
</span>
</code></pre></div></div>

<p>클래스 함수 설명:</p>
<ul>
  <li><em><strong>init</strong></em>: 랜덤으로 Red or Black 마커 결정</li>
  <li><em>GetPiecePos</em>: 5x5 보드판에서 각 마커의 위치를 리스트로 가져온다.</li>
  <li><em>heuristic_gv</em>: 게임 성공 조건 만족시 종료, otherwise Minimax 트리에서 현 노드 값과 현 state 리턴</li>
  <li><em>Max_Value</em>: Minimax 알고리즘에서 Max 값을 도출한다.</li>
  <li><em>Min_Value</em>: Minimax 알고리즘에서 Min 값을 도출한다.</li>
  <li><em>make_move</em>: 자신의 마커가 다음으로 움직일 지점의 row, col 값을 가져온다.</li>
  <li><em>succ</em>: 다음 움직일 경우들의 집합
    <ul>
      <li>궁극적으로, 최선의 다음 움직임 선택을 하기 위함.</li>
    </ul>
  </li>
  <li><em>up, down, …, downright</em>: 해당 방향으로 마커 움직임</li>
  <li><em>opponent_move</em>: 상대방(AI)의 마커가 다음으로 움직일 지점의 row col 값을 가져온다.</li>
  <li><em>place_piece</em>: 해당 지점으로 주어진 마커를 실제로 이동시킨다.</li>
  <li><em>print_board</em>: 보드판 현황 출력</li>
  <li><em>game_value</em>: 게임 성공 조건 만족 여부 판단</li>
</ul>

<h1 id="teeko-게임-실행-함수">Teeko 게임 실행 함수</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Hello, this is Samaritan'</span><span class="p">)</span>
    <span class="n">ai</span> <span class="o">=</span> <span class="n">TeekoPlayer</span><span class="p">()</span>
    <span class="n">piece_count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># drop phase
</span>    <span class="k">while</span> <span class="n">piece_count</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="ow">and</span> <span class="n">ai</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">board</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>

        <span class="c1"># get the player or AI's move
</span>        <span class="k">if</span> <span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span> <span class="o">==</span> <span class="n">ai</span><span class="p">.</span><span class="n">pieces</span><span class="p">[</span><span class="n">turn</span><span class="p">]:</span> <span class="c1"># ai 턴일 경우
</span>            <span class="n">ai</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span> <span class="c1"># 현 보드판 현황
</span>            <span class="n">move</span> <span class="o">=</span> <span class="n">ai</span><span class="p">.</span><span class="n">make_move</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">board</span><span class="p">)</span> <span class="c1"># ai 현 보드 위치에서 다음 위치 얻기
</span>            <span class="n">ai</span><span class="p">.</span><span class="n">place_piece</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span><span class="p">)</span> <span class="c1"># 다음 위치로 이동하기
</span>            <span class="k">print</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span><span class="o">+</span><span class="s">" moved at "</span><span class="o">+</span><span class="nb">chr</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">))</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">move_made</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">ai</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">opp</span><span class="o">+</span><span class="s">"'s turn"</span><span class="p">)</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">move_made</span><span class="p">:</span> <span class="c1"># 플레이어 턴
</span>                <span class="n">player_move</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move (e.g. B3): "</span><span class="p">)</span>
                <span class="k">while</span> <span class="n">player_move</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"ABCDE"</span> <span class="ow">or</span> <span class="n">player_move</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"01234"</span><span class="p">:</span>
                    <span class="n">player_move</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move (e.g. B3): "</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">ai</span><span class="p">.</span><span class="n">opponent_move</span><span class="p">([(</span><span class="nb">int</span><span class="p">(</span><span class="n">player_move</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">ord</span><span class="p">(</span><span class="n">player_move</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">))])</span> <span class="c1"># ai의 opponent는 플레이어이므로, 플레이어 마커를 움직인다.
</span>                    <span class="n">move_made</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

        <span class="c1"># update the game variables
</span>        <span class="n">piece_count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">turn</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">turn</span> <span class="o">%=</span> <span class="mi">2</span>

    <span class="c1"># move phase - can't have a winner until all 8 pieces are on the board
</span>    <span class="k">while</span> <span class="n">ai</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">board</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>

        <span class="c1"># get the player or AI's move
</span>        <span class="k">if</span> <span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span> <span class="o">==</span> <span class="n">ai</span><span class="p">.</span><span class="n">pieces</span><span class="p">[</span><span class="n">turn</span><span class="p">]:</span>
            <span class="n">ai</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
            <span class="n">move</span> <span class="o">=</span> <span class="n">ai</span><span class="p">.</span><span class="n">make_move</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">board</span><span class="p">)</span>
            <span class="n">ai</span><span class="p">.</span><span class="n">place_piece</span><span class="p">(</span><span class="n">move</span><span class="p">,</span> <span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">my_piece</span><span class="o">+</span><span class="s">" moved from "</span><span class="o">+</span><span class="nb">chr</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">))</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"  to "</span><span class="o">+</span><span class="nb">chr</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">))</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">move</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">move_made</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">ai</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
            <span class="k">print</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">opp</span><span class="o">+</span><span class="s">"'s turn"</span><span class="p">)</span>
            <span class="k">while</span> <span class="ow">not</span> <span class="n">move_made</span><span class="p">:</span>
                <span class="n">move_from</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move from (e.g. B3): "</span><span class="p">)</span>
                <span class="k">while</span> <span class="n">move_from</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"ABCDE"</span> <span class="ow">or</span> <span class="n">move_from</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"01234"</span><span class="p">:</span>
                    <span class="n">move_from</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move from (e.g. B3): "</span><span class="p">)</span>
                <span class="n">move_to</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move to (e.g. B3): "</span><span class="p">)</span>
                <span class="k">while</span> <span class="n">move_to</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"ABCDE"</span> <span class="ow">or</span> <span class="n">move_to</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">"01234"</span><span class="p">:</span>
                    <span class="n">move_to</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Move to (e.g. B3): "</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">ai</span><span class="p">.</span><span class="n">opponent_move</span><span class="p">([(</span><span class="nb">int</span><span class="p">(</span><span class="n">move_to</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">ord</span><span class="p">(</span><span class="n">move_to</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">)),</span>
                                    <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">move_from</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">ord</span><span class="p">(</span><span class="n">move_from</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="nb">ord</span><span class="p">(</span><span class="s">"A"</span><span class="p">))])</span>
                    <span class="n">move_made</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>

        <span class="c1"># update the game variables
</span>        <span class="n">turn</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">turn</span> <span class="o">%=</span> <span class="mi">2</span>

    <span class="n">ai</span><span class="p">.</span><span class="n">print_board</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">ai</span><span class="p">.</span><span class="n">game_value</span><span class="p">(</span><span class="n">ai</span><span class="p">.</span><span class="n">board</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"AI wins! Game over."</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"You win! Game over."</span><span class="p">)</span>
</code></pre></div></div>

<p>상기 코드 역시 주석으로 설명을 추가했지만 주요 부분만 뜯어내서 살펴보자.</p>

<p>‘while piece_count &lt; 8 and ai.game_value(ai.board) == 0:’</p>
<ul>
  <li>보드판에 놓인 마커 개수가 8개 이상이거나 누군가 성공 조건을 달성했다면 종료한다.</li>
</ul>

<p>‘while ai.game_value(ai.board) == 0:’</p>
<ul>
  <li>만약, 보드판에 8개 이상의 마커가 놓였는데도 승자 조건이 만족된 측이 없을 경우 실행되는 부분이다.</li>
</ul>

<h1 id="게임-실행">게임 실행</h1>

<p>하기 코드를 통해 간단히 게임 실행이 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184557144-b8d13395-4364-43d4-a312-6a4982288b0c.png" alt="image" /></p>

<p>게임 실행 시 콘솔 환경에서 입력값을 입력하며 게임 진행이 가능하다.</p>

<p>입력값으로 ABCDE 열 중에서 하나를 택하고 row index를 숫자로 조합해서 적어주면 된다 (i.e., ‘B3’ B열의 4번 째 row에 마커를 놓는다).</p>

<table>
  <tbody>
    <tr>
      <td>하기 사진처럼 B3을 입력하면 보드판이 갱신된다 (***RED: AI</td>
      <td>BLACK: 플레이어***)</td>
    </tr>
  </tbody>
</table>

<p><img src="https://user-images.githubusercontent.com/39285147/184557947-90aad7de-ffb6-413f-8e40-bf2fdca30b35.png" alt="image" /></p>

<p>몇 초가 지나면 AI가 자동적으로 최적의 선택을 하면서 마커를 놓는다 (하기 사진 참조).</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184558029-c985a2b0-cd15-40f0-abaf-4a67492290aa.png" alt="image" /></p>

<p>내가 이상한 곳에 마커를 놓아서, AI가 가장 빠르게 성공 조건을 완성시킬 수 있는 대각선 방향으로 RED 마커를 놓고있다.</p>

<p>각자 게임 진행을 해보면서 코드 또한 다시 한 번 숙지해보길 바란다.</p>]]></content><author><name>쭌스🎄</name></author><category term="Others" /><category term="Machine Learning" /><category term="Teeko Board Game" /><category term="Minimax" /><summary type="html"><![CDATA[Minimax 알고리즘을 활용해서 Teeko 게임을 구현한다.]]></summary></entry><entry><title type="html">Reinforcement Learning - Q-Learning 알고리즘</title><link href="http://localhost:4000/rl/ml-reinforcement-learning-q-learning/" rel="alternate" type="text/html" title="Reinforcement Learning - Q-Learning 알고리즘" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/rl/ml-reinforcement-learning-q-learning</id><content type="html" xml:base="http://localhost:4000/rl/ml-reinforcement-learning-q-learning/"><![CDATA[<p><strong>Q-Learning 알고리즘</strong>을 활용한 예제이다.</p>

<p>이 프로젝트는 Q-Learning 알고리즘을 이해하고 있다는 전제로 진행한다.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/reinforcement-learning-qlearning">download here</a></p>]]></content><author><name>쭌스🎄</name></author><category term="RL" /><category term="Reinforcement Learning" /><category term="Q-learning" /><summary type="html"><![CDATA[Q-Learning 알고리즘을 활용한 예제이다.]]></summary></entry><entry><title type="html">PCA - Image Compression(이미지 압축)</title><link href="http://localhost:4000/usl/ml-pca/" rel="alternate" type="text/html" title="PCA - Image Compression(이미지 압축)" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/usl/ml-pca</id><content type="html" xml:base="http://localhost:4000/usl/ml-pca/"><![CDATA[<p>PCA를 이용해서 이미지 압축을 진행해보자.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/PCA">download here</a></p>

<p>이번 프로젝트는 <strong>PCA</strong>를 활용해서 <strong>이미지 압축</strong> 문제를 해결한다.</p>

<p>이론적으로 PCA의 개념을 이해하고 있다는 전제로 프로젝트를 수행한다.</p>

<blockquote>
  <p><a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">PCA</a> 개념 숙지는 여기!</p>
</blockquote>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.linalg</span> <span class="kn">import</span> <span class="n">eigh</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_and_center_dataset</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
    <span class="n">dc</span> <span class="o">=</span> <span class="n">f</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># 정규화
</span>    <span class="k">return</span> <span class="n">dc</span>
</code></pre></div></div>

<h1 id="공분산-행렬-구하기">공분산 행렬 구하기</h1>

<p><img src="https://user-images.githubusercontent.com/39285147/184553498-b0da1938-a6d9-4ad1-b8f9-8c127c7cfbe7.png" alt="image" /></p>

<p><strong>공분산</strong>은 <strong>데이터 분포에 대한 특징</strong>을 포함하는 행렬이다.</p>

<blockquote>
  <p>보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_covariance</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">dataset</span><span class="p">),</span> <span class="n">dataset</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="고유값-분해eigendecomposition">고유값 분해(Eigendecomposition)</h1>

<p>고유값 분해는 정방행렬을 대상으로 적용할 수 있는 기법이다.</p>

<p>만약 우리가 다루는 행렬이 <strong>정방행렬</strong>이 아닌 <strong>직각행렬</strong>이라면 고유값 분해대신 <strong>특이값 분해(singular value decomposition)</strong>를 사용하면 된다.</p>

<blockquote>
  <p>이 또한 보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_eig</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">subset_by_index</span><span class="o">=</span><span class="p">[</span><span class="n">d</span><span class="o">-</span><span class="n">m</span><span class="p">,</span> <span class="n">d</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># get largest m eigen-values/vectors
</span>    <span class="n">eigh_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">eigh_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="c1"># save columns of eigenvectors
</span>    <span class="n">wsrt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">w</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># eigenvalues in decreasing order
</span>    <span class="n">vsrt</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">vsrt</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">eigh_dict</span><span class="p">[</span><span class="n">wsrt</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="c1"># rearrangement
</span>    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">wsrt</span><span class="p">),</span> <span class="n">vsrt</span>
</code></pre></div></div>

<p>파이썬에서는 ‘<em>scipy.linalg import eigh</em>‘를 활용해서 손쉽게 고유값 분해를 처리할 수 있다.</p>

<p>해당 라이브러리의 ‘eigh’ 함수를 통해 고유값과 고유벡터를 얻을 수 있다.</p>
<ul>
  <li>‘<em>subset_by_index</em>’: 불러오는 고유값과 고유벡터 수를 지정한다.</li>
</ul>

<p>공분산 행렬에 고유값 분해를 취하여 얻는 고유벡터들 중에서 <strong>그 크기가 가장 큰 벡터들은 데이터 분포에서 분산을 가장 크게 만드는 축에 대한 주성분 벡터</strong>이다.</p>

<p>차원축소 과정에서, 분산을 가장 크게 만드는 주성분들 위로 데이터를 투영시키면, 차원이 줄어듦에 따라 소실되면 정보를 최소화할 수 있다.</p>

<blockquote>
  <p>보다 자세한 정보는 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<p>따라서, 우리는 m(압축하고자 하는 이미지 차원 개수)개의 고유벡터를 가져와서 축소를 진행한다.</p>

<p>‘get_eig’의 출력값은 각 고유벡터의 <strong>크기가 큰 순서로</strong> 고유값을 정렬한 대각행렬과 이에 상응하는 고유벡터를 return한다.</p>

<p>추가적으로, 하기 ‘get_eig_prop’는 압축하고자 하는 이미지 해상도 크기를 입력으로 받는 것이 아닌 <strong>어느 정도 비율로 이미지를 압축할 것인지</strong>를 인풋으로 받는 함수이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_eig_prop</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">perc</span><span class="p">):</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
    <span class="n">wsum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">eigh</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">subset_by_value</span><span class="o">=</span><span class="p">[</span><span class="n">perc</span> <span class="o">*</span> <span class="n">wsum</span><span class="p">,</span> <span class="n">wsum</span><span class="p">])</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
    <span class="n">eigh_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">eigh_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">v</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span>
    <span class="n">wsrt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">w</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># eigenvalues in decreasing order
</span>    <span class="n">vsrt</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">vsrt</span><span class="p">[:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">eigh_dict</span><span class="p">[</span><span class="n">wsrt</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="c1"># rearrangement
</span>    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">diag</span><span class="p">(</span><span class="n">wsrt</span><span class="p">),</span> <span class="n">vsrt</span>
</code></pre></div></div>

<h1 id="차원축소-투영projection">차원축소: 투영(projection)</h1>

<p>위에서 투영시켜야할 축들을 구해냈으니, 실질적으로 데이터를 그 축들에 투영시키면서 차원을 축소해보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">project_image</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">U</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># img.shape: (1024,)
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">U</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span> <span class="c1"># U.shape: (1024, 2)
</span>        <span class="n">alpha</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">U</span><span class="p">[:,</span><span class="n">i</span><span class="p">],</span> <span class="n">img</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">alpha</span><span class="p">,</span> <span class="n">U</span><span class="p">[:,</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span> <span class="nb">sum</span>
</code></pre></div></div>

<p>‘np.zeros(img.shape[0])’는 원본 이미지의 크기만큼의 배열을 생성하고, 그 값들은 전부 0으로 초기화한다.</p>

<p>‘U.shape[1]’는 우리가 투영시킬 차원(= 주성분)들에 대한 벡터의 개수이다.</p>
<ul>
  <li>‘U.shape[0]’는 원본 이미지의 해상도인 1024(32x32)의 값을 갖는다.</li>
</ul>

<p>[<em>투영(Projection) 공식</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184554057-7c2d4211-c7af-4c22-8e5d-37f157b54a48.png" alt="image" />
<img src="https://user-images.githubusercontent.com/39285147/184554076-25f700e4-e27f-4286-94dd-7254505d4f4b.png" alt="image" /></p>

<ul>
  <li>u들은 고유벡터들 말한다.</li>
  <li>x들은 원본 이미지 데이터이다.</li>
  <li>m: 투영시킬 차원 개수(= 최종 해상도 크기)</li>
</ul>

<h1 id="시각화-원본-이미지와-비교">시각화: 원본 이미지와 비교</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">display_image</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="n">proj</span><span class="p">):</span>
    <span class="c1"># reshape the images to be 32 x 32
</span>    <span class="n">org</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">orig</span><span class="p">,</span> <span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">order</span> <span class="o">=</span> <span class="s">'F'</span><span class="p">)</span>
    <span class="n">prj</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">proj</span><span class="p">,</span> <span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">order</span> <span class="o">=</span> <span class="s">'F'</span><span class="p">)</span>
    <span class="c1"># create a figure with one row of two subplots
</span>    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="c1"># title the subplots
</span>    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Original'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Projection'</span><span class="p">)</span>
    <span class="c1"># adjust aspect ratio
</span>    <span class="n">ax0</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">imshow</span><span class="p">(</span><span class="n">org</span><span class="p">,</span><span class="n">aspect</span> <span class="o">=</span> <span class="s">'equal'</span><span class="p">)</span>
    <span class="n">ax1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">imshow</span><span class="p">(</span><span class="n">prj</span><span class="p">,</span><span class="n">aspect</span> <span class="o">=</span> <span class="s">'equal'</span><span class="p">)</span>
    <span class="c1"># create a colorbar for each image
</span>    <span class="n">fig</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">ax0</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">fig</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">ax1</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="결과">결과</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">load_and_center_dataset</span><span class="p">(</span><span class="s">'&lt;이미지 파일&gt;.npy'</span><span class="p">)</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">get_covariance</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">Lambda</span><span class="p">,</span> <span class="n">U</span> <span class="o">=</span> <span class="n">get_eig</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">projection</span> <span class="o">=</span> <span class="n">project_image</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">U</span><span class="p">)</span>
<span class="n">display_image</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">projection</span><span class="p">)</span>
</code></pre></div></div>

<p>상기 코드를 통해 손쉽게 원본 이미지와 압축된 이미지를 비교해보자.</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184554368-15a426d7-fd5c-4838-97d6-2b13b820149c.png" alt="image" /></p>]]></content><author><name>쭌스🎄</name></author><category term="USL" /><category term="PCA" /><category term="Image Compression" /><summary type="html"><![CDATA[PCA를 이용해서 이미지 압축을 진행해보자.]]></summary></entry><entry><title type="html">Hierarchical Agglomerate Clustering(HAC) - 포켓몬 군집화</title><link href="http://localhost:4000/usl/ml-hca/" rel="alternate" type="text/html" title="Hierarchical Agglomerate Clustering(HAC) - 포켓몬 군집화" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/usl/ml-hca</id><content type="html" xml:base="http://localhost:4000/usl/ml-hca/"><![CDATA[<p>Hierarchical Agglomerate Clustering(HAC) 이용해서 서로 다른 특성을 공유하는 Pokemon들을 군집으로 묶어보자.</p>

<p>‘Pokemon.csv’는 온라인에서 손쉽게 구할 수 있다.</p>

<p>이 프로젝트는 <strong>군집화(Clustering)</strong>의 개념을 숙지하고 있다는 전제로 수행한다.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/hierarchical-clustering-pokemon">download here</a></p>

<h1 id="데이터셋-관찰">데이터셋 관찰</h1>

<p><img src="https://user-images.githubusercontent.com/39285147/184554603-837ebc40-75b2-4c96-b87e-385eec2b63bd.png" alt="image" /></p>

<ul>
  <li>Columns: <em>Attack, Sp. Atk, Speed, Defense, Sp. Def, and HP</em></li>
</ul>

<h1 id="라이브러리-불러오기">라이브러리 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.cluster.hierarchy</span> <span class="kn">import</span> <span class="n">dendrogram</span><span class="p">,</span> <span class="n">linkage</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">numpy.linalg</span> <span class="k">as</span> <span class="n">LA</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<h1 id="데이터-불러오기">데이터 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_data</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
    <span class="n">pokemons</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="k">as</span> <span class="n">csvfile</span><span class="p">:</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">DictReader</span><span class="p">(</span><span class="n">csvfile</span><span class="p">)</span> <span class="c1"># 사전 형태로 csv 데이터를 가져온다
</span>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
            <span class="n">dic</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"#"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'#'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Name"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Name'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 1"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 1'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Type 2"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Type 2'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Total"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Total'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"HP"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'HP'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Attack'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Defense'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Atk'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Sp. Def'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Speed'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Generation"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Generation'</span><span class="p">]</span>
            <span class="n">dic</span><span class="p">[</span><span class="s">"Legendary"</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Legendary'</span><span class="p">]</span>
            <span class="n">pokemons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pokemons</span> <span class="c1"># 리스트 형태로 반환
</span></code></pre></div></div>

<h1 id="데이터-전처리">데이터 전처리</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">calc_features</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>    
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Attack"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Atk"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Speed"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Defense"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"Sp. Def"</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="s">"HP"</span><span class="p">])],</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'int64'</span><span class="p">)</span>
</code></pre></div></div>

<p>포켓몬 데이터셋에는 범주형 데이터가 존재한다.</p>

<p>따라서, 수치형과 범주형 데이터 type을 지정하고, 손쉬운 연산을 위해 최종 출력을 numpy 배열의 형태로 반환하자.</p>

<h1 id="거리-계산-함수">거리 계산 함수</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
        <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
            <span class="c1"># equal first index ith
</span>            <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
                    <span class="c1"># equal second index jth
</span>                    <span class="k">if</span> <span class="nb">min</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
                        <span class="c1"># share same pokemon stat
</span>                        <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">min</span> <span class="o">=</span> <span class="n">tmp</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>유클리드 거리를 사용해서 ‘<strong>Complete-linkage(완전 연결)</strong>’ 기법으로 군집간 거리를 계산한다.</p>

<p>Complete-linkage(완전 연결) 이외에도 Average linkage 등 여러 방법으로 군집간 거리를 계산할 수 있다.</p>

<blockquote>
  <p>보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="군집-합치기merge">군집 합치기(Merge)</h1>

<p>HAC는 군집들을 합쳐가면서 계층적 군집화를 진행한다.</p>

<p>하기 코드는 군집을 합치기 위한 함수이다.</p>

<p>보다 자세한 이해는 각 코드 옆 주석을 참고하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">):</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
    <span class="nb">min</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">]</span>  <span class="c1"># default to inf for replacement
</span>    <span class="c1"># iterate through cluster list (i.e., [1 2 3] --&gt; (1, 2), (1, 3), (2, 3))
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>    <span class="c1"># already clustered
</span>        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">length</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
            <span class="k">if</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])).</span><span class="n">find</span><span class="p">(</span><span class="s">'int'</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">continue</span>    <span class="c1"># already clusterd
</span>            <span class="n">tfst</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="n">tsnd</span> <span class="o">=</span> <span class="s">'tuple'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">]))</span>
            <span class="c1"># check if multiple pokemons in cluster or not
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in both
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="n">cluster_list2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c1</span> <span class="ow">in</span> <span class="n">cluster_list1</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c2</span> <span class="ow">in</span> <span class="n">cluster_list2</span><span class="p">:</span>
                        <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c1</span> <span class="o">-</span> <span class="n">c2</span><span class="p">)]</span>
                        <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                        <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                        <span class="c1"># get index of max distance
</span>                        <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span> <span class="c1"># complete-linkage
</span>                        <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in first cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">c</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">elif</span> <span class="ow">not</span> <span class="n">tfst</span> <span class="ow">and</span> <span class="n">tsnd</span><span class="p">:</span>
                <span class="c1"># multiple pokemons in second cluster
</span>                <span class="n">distances</span> <span class="o">=</span> <span class="n">max_dist</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">cluster_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
                <span class="c1"># complete-linkage
</span>                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cluster_list</span><span class="p">:</span>
                    <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">c</span><span class="p">)]</span>
                    <span class="n">distances</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
                    <span class="n">dist</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">distances</span><span class="p">).</span><span class="n">T</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># get distances only
</span>                    <span class="n">max_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">dist</span><span class="p">)</span>       <span class="c1"># get index of max distance
</span>                    <span class="n">max_dist</span> <span class="o">=</span> <span class="n">distances</span><span class="p">[</span><span class="n">max_idx</span><span class="p">]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">max_dist</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># single pokemon in both
</span>                <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">LA</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="p">])]</span>
                <span class="nb">min</span> <span class="o">=</span> <span class="n">get_min_distance</span><span class="p">(</span><span class="nb">min</span><span class="p">,</span> <span class="n">tmp</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">min</span>
</code></pre></div></div>

<p>상기 코드는 존재하는 군집 리스트 중에서 가장 가까운 거리의 군집 두 개를 찾는다.</p>

<p>여기서 군집 간 거리는 ‘complete-linkage’ 방법에 근거한다.</p>

<p>이러한 맥락에서, 주목할 점은 ‘<strong>max_idx = np.argmax(dist)</strong>’ 여기이다.</p>

<p>우리는 완전 연결 방법에 기반해서 군집 간 거리를 구하고 서로 가장 가까이 위치한 군집들을 하나의 군집으로 통합한다.</p>

<p>완전 연결은 서로 다른 군집에 포함된 데이터들의 거리가 가장 먼 값을 군집의 거리로 채택한다.</p>

<p>이를 위해, ‘np.argmax’를 사용해서 군집 간 거리를 도출하고, ‘get_min_distance(min, max_dist)’를 통해서 가장 가까운 거리에 위치한 군집을 찾아 해당 군집과 하나로 합쳐진다.</p>

<p>이 외 코드는 천천히 읽어보면 충분히 이해 가능한 부분들이다.</p>

<h1 id="hac">HAC</h1>

<p>이제 HAC 계산에 필요한 모든 함수들을 만들었으니, HAC를 구축해보자!</p>

<p>이 단계에서는 가장 가까운 거리의 군집 두 개를 찾아서 하나의 군집으로 통합하는 과정이 진핸된다.</p>

<p>각 코드 옆에 주석을 달았으니 참조하며 읽어보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hac</span><span class="p">(</span><span class="n">features</span><span class="p">):</span>
    <span class="n">flen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">features</span><span class="p">)</span>
    <span class="c1"># (n-1) x 4 array
</span>    <span class="n">res</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">flen</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="c1"># track clusters
</span>    <span class="n">cluster_dict</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span><span class="p">):</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">features</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="c1"># compute complete-linkage
</span>    <span class="n">count</span> <span class="o">=</span> <span class="n">flen</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="c1"># get minimum distance indices
</span>        <span class="n">indices</span> <span class="o">=</span> <span class="n">merge_distance</span><span class="p">(</span><span class="n">cluster_dict</span><span class="p">)</span>
        <span class="c1"># clusters to be merged
</span>        <span class="n">c1</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        <span class="n">c2</span> <span class="o">=</span> <span class="n">cluster_dict</span><span class="p">[</span><span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
        <span class="c1"># check if multiple pokemons in cluster or not
</span>        <span class="c1"># if tuple, then multiple pokemons, otherwise single pokemon
</span>        <span class="n">tfst</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c1</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">tsnd</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">c2</span><span class="p">)).</span><span class="n">find</span><span class="p">(</span><span class="s">'tuple'</span><span class="p">)</span>
        <span class="n">l1</span> <span class="o">=</span> <span class="n">l2</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">tfst</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">and</span> <span class="n">tsnd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="c1"># single pokemon
</span>            <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># multiple pokemons
</span>            <span class="k">if</span> <span class="n">tfst</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="n">c1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">tsnd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="p">[</span><span class="n">c2</span><span class="p">]</span>
        <span class="c1"># merge clusters
</span>        <span class="n">ncluster</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">fst_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">snd_idx</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="c1"># update output
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">fst_idx</span>         <span class="c1"># index of first cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">snd_idx</span>         <span class="c1"># index of seoncd cluster
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>      <span class="c1"># distance
</span>        <span class="n">res</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ncluster</span><span class="p">)</span>   <span class="c1"># num of elements in cluster
</span>        <span class="c1"># add into cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">count</span><span class="p">]</span> <span class="o">=</span> <span class="n">ncluster</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="c1"># remove from cluster list
</span>        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">fst_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="n">cluster_dict</span><span class="p">[</span><span class="n">snd_idx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<h1 id="결과-확인">결과 확인</h1>

<p>HAC를 시각화 하는 방법으로 ‘<strong><em>dendrogram</em></strong>‘이라는 함수를 자주 사용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>
    <span class="n">dn</span> <span class="o">=</span> <span class="n">dendrogram</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">21</span><span class="p">):</span>
    <span class="n">Z</span> <span class="o">=</span> <span class="n">hac</span><span class="p">([</span><span class="n">calc_features</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">load_data</span><span class="p">(</span><span class="s">'Pokemon.csv'</span><span class="p">)][:</span><span class="n">n</span><span class="p">])</span>
    <span class="n">imshow_hac</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
</code></pre></div></div>

<p>군집 몇 개를 합칠 것인지 그 숫자를 인풋으로 부여한다.</p>

<p><em>[군집 2개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555068-caa7859d-9651-41c8-b3fe-41b6032fcce5.png" alt="image" /></p>

<p><em>[군집 3개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555089-1434d5be-0e8f-442f-b981-fdf65a12379f.png" alt="image" /></p>

<p><em>[군집 4개]</em></p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555094-fe695724-17ee-47df-9ea8-070ea24c774b.png" alt="image" /></p>

<p>…</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184555117-ebd0bf14-f711-473b-b0ec-275833e32ad3.png" alt="image" /></p>]]></content><author><name>쭌스🎄</name></author><category term="USL" /><category term="HAC" /><category term="Clustering" /><category term="Pokemon" /><summary type="html"><![CDATA[Hierarchical Agglomerate Clustering(HAC) 이용해서 서로 다른 특성을 공유하는 Pokemon들을 군집으로 묶어보자.]]></summary></entry><entry><title type="html">A* Search - 8-tile Puzzle Game</title><link href="http://localhost:4000/others/ml-8-tile-puzzle-a-search/" rel="alternate" type="text/html" title="A* Search - 8-tile Puzzle Game" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/others/ml-8-tile-puzzle-a-search</id><content type="html" xml:base="http://localhost:4000/others/ml-8-tile-puzzle-a-search/"><![CDATA[<p><strong>A-star 알고리즘</strong>을 활용해서 <strong>8-tile Puzzle</strong> 게임을 구현한다.</p>

<blockquote>
  <p><a href="https://natejin.tistory.com/22"><strong><em>8-tile Puzzle</em></strong></a> 정보는 여기서 참고하자.</p>
</blockquote>

<p>이 게임에서 당신은 AI 로봇과 Teeko 보드 게임을 펼치게 될 것이다.</p>

<p>이 프로젝트는 A* 탐색 알고리즘을 이해하고 있다는 전제로 진행한다.</p>

<blockquote>
  <p><a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">A* 탐색 알고리즘</a>이란?</p>
</blockquote>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/A-star-8-tile-puzzle">download here</a></p>]]></content><author><name>쭌스🎄</name></author><category term="Others" /><category term="Machine Learning" /><category term="Game" /><category term="A* Search" /><summary type="html"><![CDATA[A-star 알고리즘을 활용해서 8-tile Puzzle 게임을 구현한다.]]></summary></entry><entry><title type="html">LeNet 신경망 - MiniPlaces 이미지 분류</title><link href="http://localhost:4000/sl/dl-miniplace-classification/" rel="alternate" type="text/html" title="LeNet 신경망 - MiniPlaces 이미지 분류" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/sl/dl-miniplace-classification</id><content type="html" xml:base="http://localhost:4000/sl/dl-miniplace-classification/"><![CDATA[<p>LeNet 신경망을 활용해서 MiniPlaces 데이터셋 이미지 분류 작업을 수행한다.</p>

<p>‘MiniPlaces’ 데이터셋은 캐글과 같은 온라인에서 손쉽게 구할 수 있다 <a href="https://www.kaggle.com/datasets/russchua/miniplaces">여기</a>.</p>

<h1 id="code">Code</h1>
<p class="notice--danger"><strong>[Notice]</strong> <a href="https://github.com/hchoi256/cs540-AI/tree/main/convolutional-neural-network">download here</a></p>

<blockquote>
  <p>CNN이나 LeNet 신경망에 대한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="라이브러리-불러오기">라이브러리 불러오기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># python imports
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="c1"># torch imports
</span><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>
<span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>

<span class="c1"># helper functions for computer vision
</span><span class="kn">import</span> <span class="nn">torchvision</span>
<span class="kn">import</span> <span class="nn">torchvision.transforms</span> <span class="k">as</span> <span class="n">transforms</span>
</code></pre></div></div>

<h1 id="lenet-신경망-구축">LeNet 신경망 구축</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LeNet</span><span class="p">(</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span> <span class="n">num_classes</span><span class="o">=</span><span class="mi">100</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">LeNet</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">()</span>
        <span class="c1"># certain definitions
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">conv1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">flatten</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Flatten</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear1</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span><span class="mi">256</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear2</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span><span class="mi">128</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear3</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="n">num_classes</span><span class="p">)</span>

    <span class="c1"># 순전파
</span>    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="n">shape_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># certain operations
</span>        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv1</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">max_pool2d</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv2</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span> <span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">flatten</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">linear1</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">relu</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">linear2</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">linear3</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">shape_dict</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">x</span>
        <span class="k">return</span> <span class="n">out</span><span class="p">,</span> <span class="n">shape_dict</span>
</code></pre></div></div>

<p>상기 LeNet 신경망에서 초기값 및 순전파 과정을 정의한다.</p>

<p>PyTorch 특성상 이후 학습 단계에서 <strong>역전파</strong>를 정의할 예정이다.</p>

<blockquote>
  <p><strong><em>‘Stride, Pooling, Padding’</em></strong> 혹은 순/역전파에 관한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<h1 id="학습-가능-피라미터-개수optional">학습 가능 피라미터 개수(<em>Optional</em>)</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">count_model_params</span><span class="p">():</span>
    <span class="s">'''
    return the number of trainable parameters of LeNet.
    '''</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">LeNet</span><span class="p">()</span>
    <span class="n">model_params</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">model_params</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">numel</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">model</span><span class="p">.</span><span class="n">parameters</span><span class="p">()</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">requires_grad</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">model_params</span> <span class="o">/</span> <span class="mf">1e6</span>   
</code></pre></div></div>

<p>해당 과정은 학습에 필수는 아니지만, 교육 측면에서 도움이 될 수 있으니 만들어보았다.</p>

<h1 id="모델-학습">모델 학습</h1>

<p>하기 코드 옆에 주석을 자세히 달아놨으니 참조하며 읽어보길 바란다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">epoch</span><span class="p">):</span>
    <span class="s">"""
    model (torch.nn.module): The model created to train
    train_loader (pytorch data loader): Training data loader
    optimizer (optimizer.*): A instance of some sort of optimizer, usually SGD
    criterion (nn.CrossEntropyLoss) : Loss function used to train the network
    epoch (int): Current epoch number
    """</span>
    <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
    <span class="n">train_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="nb">input</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">total</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)):</span>
        <span class="c1">###################################
</span>        <span class="c1"># fill in the standard training loop of forward pass,
</span>        <span class="c1"># backward pass, loss computation and optimizer step
</span>        <span class="c1">###################################
</span>
        <span class="c1"># 1) zero the parameter gradients
</span>        <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
        <span class="c1"># 2) forward + backward + optimize
</span>        <span class="n">output</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
        <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span> <span class="c1"># 역전파 진행
</span>        <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>

        <span class="c1"># Update the train_loss variable
</span>        <span class="c1"># .item() detaches the node from the computational graph
</span>        <span class="c1"># Uncomment the below line after you fill block 1 and 2
</span>        <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>

    <span class="n">train_loss</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'[Training set] Epoch: {:d}, Average loss: {:.4f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">train_loss</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">train_loss</span>
</code></pre></div></div>

<p>‘<strong>tqdm</strong>‘는 progress bar를 생성해주고, 함수나 반복문의 TTC (Time To Completion) 를 예측하는 파이썬 패키지이다.</p>

<p>모델 학습 과정을 실시간으로 확인하기 위해 불러온 패키지이다.</p>

<p>주요 특징들을 살펴보자:</p>
<ul>
  <li><em>optimizer.zero_grad()</em>: 이전 step에서 각 layer 별로 계산된 gradient 값을 모두 0으로 초기화 시키는 작업으로, 0으로 초기화 하지 않으면 이전 step의 결과에 현재 step의 gradient가 누적으로 합해져서 계산된다.</li>
  <li><em>criterion</em>: 손실함수 (이 프로젝트는 ‘<em>크로스 엔트로피</em>‘를 활용한다)</li>
  <li><em>optimizer</em>: 최적화 방법 (i.e., Adam)</li>
  <li><em>loss.backward()</em>: back-propagation을 통해 gradient를 계산한다.</li>
  <li><em>optimizer.step()</em>: 각 layer의 gradient 값을 이용하여 파라미터를 업데이트.</li>
  <li><em>train_loss += loss.item()</em>: 손실값 누적 계산</li>
</ul>

<blockquote>
  <p><strong><em>크로스 엔트로피(Cross Entropy)</em></strong>에 관한 보다 자세한 내용은 <a href="https://github.com/hchoi256/ai-terms/blob/main/README.md">여기</a>를 참조하자.</p>
</blockquote>

<blockquote>
  <p>보다 자세한 PyTorch 문법은 외부 사이트 <a href="https://gaussian37.github.io/dl-pytorch-snippets/">여기</a>를 참조하길 바란다.</p>
</blockquote>

<h1 id="모델-테스트">모델 테스트</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">test_loader</span><span class="p">,</span> <span class="n">epoch</span><span class="p">):</span>
    <span class="n">model</span><span class="p">.</span><span class="nb">eval</span><span class="p">()</span>
    <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="n">no_grad</span><span class="p">():</span>
        <span class="k">for</span> <span class="nb">input</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">test_loader</span><span class="p">:</span>
            <span class="n">output</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span>
            <span class="n">pred</span> <span class="o">=</span> <span class="n">output</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdim</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">correct</span> <span class="o">+=</span> <span class="n">pred</span><span class="p">.</span><span class="n">eq</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">view_as</span><span class="p">(</span><span class="n">pred</span><span class="p">)).</span><span class="nb">sum</span><span class="p">().</span><span class="n">item</span><span class="p">()</span>

    <span class="n">test_acc</span> <span class="o">=</span> <span class="n">correct</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">test_loader</span><span class="p">.</span><span class="n">dataset</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'[Test set] Epoch: {:d}, Accuracy: {:.2f}%</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="mf">100.</span> <span class="o">*</span> <span class="n">test_acc</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">test_acc</span>
</code></pre></div></div>

<p>이제 개인적으로 각자 MiniPlaces 데이터셋을 활용해서 직접 PyTorch로 모델을 학습시켜보도록 하자.</p>]]></content><author><name>쭌스🎄</name></author><category term="SL" /><category term="LeNet" /><category term="Classification" /><category term="PyTorch" /><summary type="html"><![CDATA[LeNet 신경망을 활용해서 MiniPlaces 데이터셋 이미지 분류 작업을 수행한다.]]></summary></entry><entry><title type="html">Python: PART 2 - Web Application without Server</title><link href="http://localhost:4000/python/python-web-server-exercise/" rel="alternate" type="text/html" title="Python: PART 2 - Web Application without Server" /><published>2022-08-13T00:00:00+09:00</published><updated>2022-08-13T00:00:00+09:00</updated><id>http://localhost:4000/python/python-web-server-exercise</id><content type="html" xml:base="http://localhost:4000/python/python-web-server-exercise/"><![CDATA[<hr />
<h1 id="강아지-품종-분류-ai-웹페이지">강아지 품종 분류 AI 웹페이지</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span> <span class="n">pip</span> <span class="n">install</span> <span class="n">opencv</span><span class="o">-</span><span class="n">python</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Loading the libraries
</span><span class="kn">from</span> <span class="nn">distutils.command.install_egg_info</span> <span class="kn">import</span> <span class="n">to_filename</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="nn">cv2</span> <span class="c1"># *opencv
</span><span class="kn">import</span> <span class="nn">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="nn">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
</code></pre></div></div>

<p>상기 라이브러리 중에 눈에 띄는 것이 있다; <strong>cv2</strong></p>

<p>cv2 라이브러리는 opencv 패키지를 설치해서 불러올 수 있다.</p>

<p>*OpenCV(Open Source Computer Vision)는 다양한 영상/동영상 처리에 사용할 수 있는 실시간 처리에 능한 오픈소스 라이브러리이다.</p>

<p>실시간 웹서버와 같은 환경에서 활용성이 좋다!</p>

<p>자, 이제 여러 장의 서로 다른 강아지 품종 이미지를 학습한 사전 학습 모델 ‘dog_breed.h5’를 전이학습을 위해 불러오자.</p>

<blockquote>
  <p>해당 사전모델 요청 시 제공.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="n">load_model</span><span class="p">(</span><span class="s">"dog_breed.h5"</span><span class="p">)</span>
</code></pre></div></div>

<p>불러온 사전학습 모델은 다음과 같이 세 가지 강아지 품종의 클래스로 최종 출력을 도출한다.</p>

<p>만약, 더 완성도 높은 분류 모델을 형성하고 싶다면 <strong>fine-tuning</strong> 작업을 통해 모델 개선 혹은 <strong>ImageNet</strong>을 사전모델로 채택하는 선택지를 취할 수 있을 것이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CLASS_NAMES</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Scottish Deerhound'</span><span class="p">,</span><span class="s">'Maltese Dog'</span><span class="p">,</span><span class="s">'Bernese Mountain Dog'</span><span class="p">]</span>
</code></pre></div></div>

<p>상기 세 가지 강아지 품종 중에서 그나마 가장 유사한 종으로 인풋 이미지를 분류한다.</p>

<p>자, 이제 이전 시간에 배웠던 웹 페이지를 디자인할 시간이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">st</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"업로드한 개의 품종를 알아보자!"</span><span class="p">)</span> <span class="c1"># title
</span><span class="n">st</span><span class="p">.</span><span class="n">markdown</span><span class="p">(</span><span class="s">"개 이미지를 업로드 해주세요!"</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">markdown</span><span class="p">(</span><span class="s">"---"</span><span class="p">)</span> <span class="c1"># division
</span>
<span class="c1"># file uploader
</span><span class="n">dog_image</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">file_uploader</span><span class="p">(</span>
    <span class="n">label</span> <span class="o">=</span> <span class="s">"이미지를 선택해주세요..."</span><span class="p">,</span> 
    <span class="nb">type</span> <span class="o">=</span> <span class="p">[</span><span class="s">"jpg"</span><span class="p">,</span> <span class="s">"png"</span><span class="p">]</span>
<span class="p">)</span>
<span class="n">submit</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">button</span><span class="p">(</span><span class="s">"예측해주세요!"</span><span class="p">)</span> <span class="c1"># button object
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># button event handler
</span><span class="k">if</span> <span class="n">submit</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">dog_image</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># opencv의 imdecode 인자로 사용하기 위해 byte로 변환한다
</span>        <span class="n">file_bytes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span>
            <span class="nb">bytearray</span><span class="p">(</span><span class="n">dog_image</span><span class="p">.</span><span class="n">read</span><span class="p">()),</span> 
            <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span>
    <span class="p">)</span>
    <span class="n">opencv_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imdecode</span><span class="p">(</span><span class="n">file_bytes</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># save the input image
</span>
    <span class="n">st</span><span class="p">.</span><span class="n">image</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">,</span> <span class="n">channels</span> <span class="o">=</span> <span class="s">"BGR"</span><span class="p">)</span> <span class="c1"># opencv는 RGB가 아닌 BGR로 포맷을 저장한다
</span>
    <span class="c1"># adjusting the size
</span>    <span class="n">opencv_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">,</span> <span class="p">(</span><span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">))</span>
    <span class="n">opencv_image</span><span class="p">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="n">Y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">opencv_image</span><span class="p">)</span> <span class="c1"># fine-tuned model 예측 수행
</span>
    <span class="c1"># st.write(np.argmax(Y_pred))
</span>    <span class="n">st</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="s">"판단한 개의 품종은 "</span> <span class="o">+</span> <span class="n">CLASS_NAMES</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">Y_pred</span><span class="p">)]))</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184471368-46e7b321-db37-41d1-acd6-717e9478f320.png" alt="image" /></p>

<hr />
<h1 id="dataframe-분석하기">Dataframe 분석하기</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">streamlit</span> <span class="k">as</span> <span class="n">st</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
</code></pre></div></div>

<p>어떠한 dataset을 df 객체에 저장했다고 가정하자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_types</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">dtypes</span>
<span class="n">cat_cols</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">data_types</span><span class="p">[</span><span class="n">data_types</span> <span class="o">==</span> <span class="s">"object"</span><span class="p">].</span><span class="n">index</span><span class="p">)</span> <span class="c1"># 범주형 컬럼 저장
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># container
</span><span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">container</span><span class="p">():</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"컨테이너"</span><span class="p">)</span>
    <span class="n">value_counts</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Sex"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">value_counts</span><span class="p">.</span><span class="n">index</span><span class="p">)</span>
    <span class="n">col1</span><span class="p">,</span> <span class="n">col2</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">columns</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">col1</span><span class="p">:</span>
        <span class="c1"># 남녀 성비 분포 (Pie)
</span>        <span class="n">st</span><span class="p">.</span><span class="n">subheader</span><span class="p">(</span><span class="s">"서브 컬럼 1"</span><span class="p">)</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">value_counts</span><span class="p">,</span> <span class="n">autopct</span><span class="o">=</span><span class="s">"%0.2f%%"</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Male"</span><span class="p">,</span> <span class="s">"Female"</span><span class="p">])</span> <span class="c1"># 원형으로 성비 표현
</span>        <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">col2</span><span class="p">:</span>
        <span class="c1"># 남녀 성비 분포 (Bar)
</span>        <span class="n">st</span><span class="p">.</span><span class="n">subheader</span><span class="p">(</span><span class="s">"서브 컬럼 2"</span><span class="p">)</span>
        <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">value_counts</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">value_counts</span><span class="p">)</span> <span class="c1"># bar로 성비 표현
</span>        <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>

    <span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">expander</span><span class="p">(</span><span class="s">"Results of Sex Ratio"</span><span class="p">):</span>
        <span class="n">st</span><span class="p">.</span><span class="n">dataframe</span><span class="p">(</span><span class="n">value_counts</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184472017-70a9dc48-5908-4104-9d56-167c49260c7f.png" alt="image" /></p>

<p>당신은 웹페이지 내에서 다른 plot 유형을 선택해서 데이터 분포를 확인하고 싶을지도 모른다.</p>

<p>상기 목표 역시 아래처럼 손쉽게 구현 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 다른 plot 유형 선택
</span><span class="k">with</span> <span class="n">st</span><span class="p">.</span><span class="n">container</span><span class="p">():</span>
    <span class="n">st</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">"asdfasdfasdf"</span><span class="p">)</span>

    <span class="n">chart</span> <span class="o">=</span> <span class="p">(</span><span class="s">"box"</span><span class="p">,</span> <span class="s">"violin"</span><span class="p">,</span> <span class="s">"kdeplot"</span><span class="p">,</span> <span class="s">"histogram"</span><span class="p">)</span>
    <span class="n">chart_selection</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">selectbox</span><span class="p">(</span><span class="s">"asefaefa"</span><span class="p">,</span> <span class="n">chart</span><span class="p">)</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"box"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Sex"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"Fare"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"violin"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Sex"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"Fare"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">chart_selection</span> <span class="o">==</span> <span class="s">"kdeplot"</span><span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Fare"</span><span class="p">],</span> <span class="n">hue</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="s">"Sex"</span><span class="p">],</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">else</span> <span class="p">:</span>
        <span class="n">sns</span><span class="p">.</span><span class="n">histplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">"Fare"</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">"Sex"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>

    <span class="n">st</span><span class="p">.</span><span class="n">pyplot</span><span class="p">(</span><span class="n">fig</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/39285147/184472175-c98abfb5-55c4-4af4-a688-521659032de1.png" alt="image" /></p>]]></content><author><name>쭌스🎄</name></author><category term="Python" /><category term="Python Web App" /><category term="Streamlit" /><category term="Opencv" /><summary type="html"><![CDATA[강아지 품종 분류 AI 웹페이지]]></summary></entry><entry><title type="html">[논문 분석] A Multi-Task Benchmark for Korean Legal Language Understanding and Judgement Prediction (arXiv 2022)</title><link href="http://localhost:4000/aipapernlp/ai-paper-ko-legal-nlp/" rel="alternate" type="text/html" title="[논문 분석] A Multi-Task Benchmark for Korean Legal Language Understanding and Judgement Prediction (arXiv 2022)" /><published>2022-08-12T00:00:00+09:00</published><updated>2022-08-12T00:00:00+09:00</updated><id>http://localhost:4000/aipapernlp/ai-paper-ko-legal-nlp</id><content type="html" xml:base="http://localhost:4000/aipapernlp/ai-paper-ko-legal-nlp/"><![CDATA[<p><img src="https://user-images.githubusercontent.com/39285147/184294516-0dad2074-9c87-44f1-af52-6ea4c0b5f174.png" alt="image" /></p>

<p><a href="https://arxiv.org/abs/2206.05224"><strong>논문</strong></a></p>

<h1 id="들어가면서">들어가면서</h1>
<p>법률 계약서는 일반인이 독해하기 어려운 단어들 뿐만 아니라, 한 문장이 한 페이지를 차지할 정도로 긴 문장들을 포함한다.</p>

<p>이전에 참가한 한 세미나에서는 이러한 법률 계약서에 존재하는 오류를 검사하는 AI 모델을 실제 변호사와 대결시킨 사례를 소개했다.</p>

<p>AI 모델은 <strong>26초 만에 94%의 정확도</strong>로 오류를 검증해내었고, 반면 사람 변호사는 <strong>96분 동안 86%의 정확도</strong>로 오류를 잡아냈다.</p>

<p>이러한 압도적인 AI의 성능은 매번 적응되지 않을 정도로 정말이지 어마무시하다.</p>

<p>하지만, 상기 법률 계약서의 문서 내용은 영어로 적혀있었다. 다시 말해, 자연어 처리 분야에서 기계독해가 까다로운 <strong>한국어로 적힌 법률 계약서</strong>는 아직까진 그만한 성능을 내는 AI 모델이 전무하다.</p>

<p>상기 목표를 달성하기 위해서는 다양한 조건이 수반되어야 할터인데, 가령 한국어 기반 모델 검증을 위한 <strong>법률 평가 데이터셋</strong>이 필요할 것이고, 까다로운 한국어 문법을 정확히 이해하는 성능좋은 언어모델이 필요하다.</p>

<p>여기까지는 내 잡담이었으니 가볍게 무시해도 상관없다.</p>

<p>하지만, 앞서 언급된 사례는 다양한 전문 분야에서 <strong>한국어 기반 NLP 연구</strong>의 필요성을 부각한다는 점은 인지하자.</p>

<h1 id="introduction">INTRODUCTION</h1>
<p>[<em>KAIST AI Grad School, located in Seoul</em>]</p>

<p><img src="https://user-images.githubusercontent.com/39285147/184298843-e3edab46-0d27-4a74-a1f1-62762d1a794a.png" alt="image" /></p>

<p>정부에서 출시한 규칙 및 도메인 지식에 근거한 기존 법률 시스템은 유의미한 성과를 내기도 했으나, <strong>범용성이 부족</strong>하다는 한계점이 존재했다.</p>

<p>이러한 실패에는 해당 전문 분야에 대한 <strong>한국어 NLP 데이터셋 부재</strong>와 NLP 학습에 <strong>까다로운 한국어 특성</strong>이 내재되어 있을 것이다.</p>

<p>하지만, Deep Learning에 발전에 따라 자연어 처리 또한 많은 변화의 시기를 거쳐서 ‘판결 예측’과 같은 여러 법률 분야에 새로운 기술적 패러다임을 제시한다.</p>

<p>이러한 격동의 시기에 발맞춰 전세계에서는 AI 모델 학습에 필수적인 법률 데이터셋을 만들기 시작했고, 서교수 연구팀 또한 기존에 정부에서 내놓은 활용 가치가 떨어졌던 한국어 법률 데이터셋로부터 더 확장하여 새로운 한국어 기반 법률 데이터셋 연구 개발에 임하게 되었다.</p>

<p>서교수를 주축으로한 연구팀은 ‘최초로’ <strong>한국어 기반 대용량 법률 AI 데이터셋</strong>과 <strong>‘LBOX OPEN’</strong>이라는 법률 평가 데이터셋, 그리고 <strong>LCUBE라는 한국어 법률 언어 모델</strong>을 만들게 되었다 (<em>LBOX OPEN과 LCUBE는 해당 논문 페이지를 통해 다운받아 이용 가능하다</em>).</p>

<p>LBOX OPEN은 <em>1개의 법률 corpus</em>, <em>두 개의 분류 문제</em>, <em>두 개의 법률 판단 예측 문제</em>, 그리고 <em>한 개의 요약 문제</em>를 위한 평가 데이터셋이다.</p>

<blockquote>
  <p>범죄와 같이 어떠한 종류의 사례들을 기반으로 구성된 데이터셋인지, 언제/어떻게 데이터를 수집했는지 등 보다 자세한 내용은 해당 논문에서 확인하길 바란다.</p>
</blockquote>

<h1 id="lbox-open---large-scale-korean-legal-ai-benchmark"><em>LBOX OPEN</em> - Large-scale Korean legal AI benchmark.</h1>

<p>LBOX OPEN의 구성은 다음과 같다:</p>
<ul>
  <li>(1) <strong>a large-scale legal precedent corpus</strong> (PRECEDENT CORPUS)</li>
  <li>(2) <strong>two classification tasks</strong> (CASE NAME, STATUTE)</li>
  <li>(3) <strong>two legal judgement prediction tasks</strong> (LJP-CRIMINAL, LJPCIVIL)</li>
  <li>(4) <strong>one summarization task</strong> (SUMMARIZATION).</li>
</ul>

<blockquote>
  <p>각 구성 요소에 대한 활용 방벙과 같은 보다 자세한 설명은 해당 논문에 나와있다.</p>
</blockquote>

<h2 id="data-preprocessing">Data preprocessing</h2>
<p>서교수 연구팀은 기존에 정부에서 내놓은 Korean precedents라는 raw data에 포함된 non-trivial 정보들을 자동 parsing하고자 <strong>custom data engineering pipeline</strong>을 만들었다.</p>

<p>해당 Pipeline에서 여러 분류 작업을 거친다.</p>
<ul>
  <li><em>RestNet</em>을 기반 <em>Layout classifier</em>를 활용하여 각 페이지를 <em>‘text only’</em> 혹은 <em>‘text w/ tbl or pictures’</em>로 분류하였다.</li>
  <li><em>Mask-R-CNN</em>의 <em>Layout parser</em>를 사용하여 non-textual 요소들을 페이지로부터 분리한다.</li>
  <li>Save the information to the database:
    <ul>
      <li>If pdf, extract text w/ custom rule-based parser</li>
      <li>Otherwise if images, extract text segments and their coordinates w/ proprietary OCR engine and use language model to corret OCR errors.</li>
    </ul>
  </li>
</ul>

<p>상기 과정을 거친 후 <strong>confidence score</strong>를 계산해 기준치보다 낮을 경우, 해당 페이지들은 연구팀이 직접 수동으로 처리한다.</p>

<p>마지막으로, 하기 정보를 JSON 형식으로 저장하고 최종 output을 도출한다:</p>
<ul>
  <li>(1) meta information such as case name, sentencing dates, and names of attendees</li>
  <li>(2) ruling</li>
  <li>(3) gist of claim</li>
  <li>(4) appeal</li>
  <li>(5) reasoning body that consists of facts, claims, reasoning, and decision of judges.</li>
</ul>

<h1 id="lcube---language-model-based-on-lbox-open"><em>LCUBE</em> - Language model based on LBOX OPEN</h1>
<p><strong>Classification tasks</strong></p>
<ul>
  <li>GPT-2 활용 decoder-only 모델 –&gt; comparable performance with MT5 (a competitive encoder-decoder language model with larger size)</li>
</ul>

<p><strong>Summarization tasks</strong></p>
<ul>
  <li>타모델에 비해 상대적으로 안좋은 성능을 보인다.</li>
</ul>

<h1 id="experiments">EXPERIMENTS</h1>
<p>CASE NAME, STATUTE, LJP-CRIMINAL, LJP-CIVIL, 그리고 SUMMARIZATION tasks에 대하여 실험 평가를 진행한다.</p>

<h2 id="model-training">Model training</h2>
<p>서교수님의 LK 연구소는 한정된 예산으로 GPU와 같은 하드웨어를 따로 소유하는 것이 아니라 클라우드를 대여하는 연구 방식으로 유명하다.</p>

<p>이번 프로젝트에서 역시 클라우드에서 Nvidia RTX3090/RTX6000를 대여하여 모델 학습을 진행했다.</p>

<p>다음은 모델 학습에 사용된 parameter settings이다:</p>
<ul>
  <li><strong>learning rate</strong>: 0.00003-0.0001</li>
  <li><strong>batch</strong>: 8-16</li>
  <li><strong>optimizer</strong>: AdamW</li>
  <li><strong>fine-tuning</strong>: MT5-small (checkpoint: <em>‘google/mt5-small’</em>)</li>
  <li><strong>accracy</strong>: <em>F</em>1</li>
  <li>etc.</li>
</ul>

<blockquote>
  <p>보다 상세한 spec은 해당 논문을 참조하길 바란다.</p>
</blockquote>

<h2 id="metric">Metric</h2>
<ul>
  <li>(1) the case is counted as a true positive if their values are equal</li>
  <li>(2) false positive f their values are not equal</li>
  <li>(3) When the target field exists only in GT but not in the prediction, the case is counted as a false negative.</li>
  <li>(4) If the target field is empty in the GT but exists in the prediction it is counted as a false positive.</li>
  <li>(5) If the field is empty in both GT and the prediction, the case is considered as a truenegative.</li>
</ul>

<blockquote>
  <p>The zero labels in LJP-CRIMINAL are counted as nulls.</p>
</blockquote>

<h2 id="results">Results</h2>
<p><img src="https://user-images.githubusercontent.com/39285147/184300687-c0aa8c4c-5d9c-4156-b674-737bac61bbd8.png" alt="image" /></p>

<p><strong>LCUBE-base</strong> vs. <strong>KoGPT-2</strong></p>
<ul>
  <li>In all tasks except SUMMARIZATION, LCUBE-base shows a higher performance</li>
</ul>

<h1 id="limitations">LIMITATIONS</h1>
<p>해당 논문 모든 내용은 한국 법체계의 first level court에 대한 precedents만을 고려한 연구 결과이다.</p>

<p>또한, 원고, 피고와 같은 요인들을 인풋으로 고려하지 않은 판결 예측 결과라고 가정하며, LBOX OPEN은 legal information retrieval task 등 여러 문제에 대한 사례 정보는 반영하지 않는다.</p>

<p>상기 언급된 한계점들은 시스템적으로 구현이 매우 까다로우며, 도메인 지식이 풍부한 여러 전문가와의 협업이 필요시 될것이며, 이것이 곧 LBOX OPEN의 미래 과제일 것이다.</p>]]></content><author><name>쭌스🎄</name></author><category term="AIPaperNLP" /><category term="AI Research Paper" /><category term="Kaist" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Part 3: BERT Language Model</title><link href="http://localhost:4000/bert/bert-3/" rel="alternate" type="text/html" title="Part 3: BERT Language Model" /><published>2022-08-08T00:00:00+09:00</published><updated>2022-08-08T00:00:00+09:00</updated><id>http://localhost:4000/bert/bert-3</id><content type="html" xml:base="http://localhost:4000/bert/bert-3/"><![CDATA[<h1 id="bert">BERT</h1>
<p>Bi-directional transformer로 이루어진 언어모델로, BERT 언어모델 위에 1개의 classification layer만 부착하여 다양한 NLP task를 수행한다.</p>

<h1 id="wordpiece-tokenizing">WordPiece tokenizing</h1>
<p>입력 문장을 toeknizing하고, 그 token들로 ‘token sequence’를 만들어 학습에 사용한다.</p>

<p>BPE와는 다르게 WordPiece는 <strong>우도</strong>로 병합을 진행하여, 두 문자가 같이 오는 문자 단위를 중요시한다.</p>

<blockquote>
  <p><em>우도</em>: 전체 글자 중 각 단어가 따로 등장한 것을 ‘분모’로, 같이 등장한 빈도수를 ‘분자’로 삼는다.</p>
</blockquote>

<h1 id="bpe-byte-pair-encoding">BPE (Byte Pair Encoding)</h1>
<p><img src="https://user-images.githubusercontent.com/39285147/183617390-94429c10-1868-4967-a534-f56199dfeba3.png" alt="image" /></p>

<p>이러한 작업을 위해 빈도수에 기반하여 토큰을 병합하는 <strong>BPE (Byte Pair Encoding)</strong> 알고리즘을 이용한다.</p>

<p>BPE는 언어 집합의 크기는 억제하면서 시퀀스의 길이를 압축하는 알고리즘이다 (<em>시퀀스 압축</em>: ‘l, o, w’ –&gt; ‘low’).</p>

<p>Word2Vec으로 어절 단위로 1차 tokenizing을 진핸한 후, iteration을 통해 나타난 token sequence 빈도수에 기반하여 <strong>의미 있는 패턴(subword)</strong>으로 잘라서 tokenizing한다.</p>

<p>가령, BERT 모델은 ‘고양경찰서’와 ‘종로경찰서’에서 ‘##경찰서’라는 token sequence를 형성한다.</p>

<h1 id="etri-korbert">ETRI KorBERT</h1>
<p>한국어는 영어와 다르게 <strong>조사의 쓰임에 따라 형태소가 변하는 문법적 특성</strong>나 <strong>교착어</strong> 등 NLP 처리에 까다로운 tasks를 수반하는 언어 중 하나이다.</p>

<p>영어 BERT 모델과 다르게, 형태소 단위로 corpus를 분절하고(= <em>Mecab tokenzier</em>) Word2Vec으로 1차 tokenizing 이전에 형태소 태그를 단어마다 붙여놓는 <strong>labeling 작업</strong>이 수반된다.</p>

<p>이 작업은 텍스트가 더 쪼개질 수 있도록 도와준다</p>
<ul>
  <li>가령, ‘이’라는 단어가 어떤 것을 가르키는 이것의 의미인지 숫자 2의 의미인지 구분해준다.</li>
</ul>

<p><strong>KorBERT Morphology</strong>와 <strong>KorBERT WordPiece</strong> 두 가지 세부 모델이 존재한다.</p>

<h2 id="korbert-성능에-영향을-미치는-요인">KorBERT 성능에 영향을 미치는 요인</h2>
<ul>
  <li>Corpus 사이즈</li>
  <li>Corpus 도메인</li>
  <li>Corpus tokenizing (어절, BPE, 형태소)</li>
  <li>Vocab 사이즈 小</li>
  <li><strong>데이터 전처리</strong></li>
</ul>

<h1 id="korbert-실습-과정">KorBERT 실습 과정</h1>
<ol>
  <li>
    <p>원하는 <strong>corpus</strong> 텍스트(가령, 위키 기사) 불러오기</p>
  </li>
  <li>
    <p><strong>SentenceTokenizer</strong>/WordTokenizer 1차 분절</p>
  </li>
  <li>‘Mecab’ tokenizer 기반 <strong>형태소 단위 분절</strong>
    <ul>
      <li>‘Mecab’이 가장 성능이 좋다.</li>
    </ul>
  </li>
  <li><strong>교착어 방지 token sequences 형성</strong> (‘<em>BertWordPieceTokenizer</em>’)
    <ul>
      <li>GPT 모델은 ‘<em>ByteLevelBPETokenizer</em>‘를 사용한다/</li>
    </ul>
  </li>
  <li>
    <p>데이터 전처리 (i.e., 불용어 등 제거)</p>
  </li>
  <li>
    <p>BERT 학습</p>
  </li>
  <li><em>*KorQuAD</em> 데이터셋으로 학습된 BERT 모델 평가
    <ul>
      <li><em>KorQuAD</em>: 자연어 이해(NLU, Natural Language Understanding) 학습용 한국어 질의응답 표준 데이터셋이다.</li>
    </ul>
  </li>
  <li>
    <p><a href="https://github.com/e9t/nsmc"><em>BERT 네이버 영화 리뷰 데이터 감성분석</em></a></p>
  </li>
  <li>
    <p><a href="https://github.com/machinereading/kor-re-gold"><em>BERT 관계 추출</em></a></p>
  </li>
  <li><strong>유튜브 댓글 데이터 감성 분석</strong> (데이터 수집: ‘<em>썸트랜드</em>’)</li>
</ol>

<h1 id="references">References</h1>
<p><a href="https://www.slideshare.net/qksksk657/korquad-v10"><em>KorQuAD</em></a></p>

<p><a href="https://arxiv.org/abs/1810.04805"><em>BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</em></a></p>]]></content><author><name>쭌스🎄</name></author><category term="BERT" /><category term="NLP" /><category term="BERT" /><category term="Language Model" /><summary type="html"><![CDATA[BERT Bi-directional transformer로 이루어진 언어모델로, BERT 언어모델 위에 1개의 classification layer만 부착하여 다양한 NLP task를 수행한다.]]></summary></entry></feed>